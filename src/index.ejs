<% var item, key %>
<%
htmlWebpackPlugin.options.appMountIds = htmlWebpackPlugin.options.appMountIds || [] %>
<%
htmlWebpackPlugin.options.lang = htmlWebpackPlugin.options.lang || "en" %>
<%
htmlWebpackPlugin.options.links = htmlWebpackPlugin.options.links || [] %>
<%
htmlWebpackPlugin.options.meta = htmlWebpackPlugin.options.meta || [] %>
<%
htmlWebpackPlugin.options.scripts = htmlWebpackPlugin.options.scripts || []
%>
<!DOCTYPE html>
<html lang="<%= htmlWebpackPlugin.options.lang %>" <% if (htmlWebpackPlugin.files.manifest) { %> manifest="
<%= htmlWebpackPlugin.files.manifest %>"
<% } %>>

<head>

	<base href="./">
	<meta charset="utf-8">
	<meta content="ie=edge" http-equiv="x-ua-compatible">
	<%

    if (htmlWebpackPlugin.options.baseHref) { %>
	<base href="<%= htmlWebpackPlugin.options.baseHref %>">
	<%
    } %>
	<%

    if (Array.isArray(htmlWebpackPlugin.options.meta)) { %>
	<%
      for (item of htmlWebpackPlugin.options.meta) { %>
	<meta<% for (key in item) { %>
		<%= key %>="
		<%= item[key] %>"
		<% } %>>
		<%
      } %>
		<%
    } %>
		<%

    %>
		<title>game.ryanspice.com</title>


		<link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Droid+Sans">
		<!--
		<link rel="stylesheet" type="text/css" href="https://ryanspice.com/game/template-style.css">
		<link href="//fonts.googleapis.com/css?family=VT323:400" rel="stylesheet" type="text/css">
    <link href='https://fonts.googleapis.com/css?family=Open+Sans+Condensed:700' rel='stylesheet' type='text/css'>
		<link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Syncopate">
		<link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Bubblegum+Sans">
		-->






		<%

    if (htmlWebpackPlugin.files.favicon) { %>
		<link href="<%= htmlWebpackPlugin.files.favicon %>" rel="shortcut icon" />
		<%
    } %>
		<%

    if (htmlWebpackPlugin.options.mobile) { %>
		<meta content="width=device-width, initial-scale=1" name="viewport">
		<%
    } %>
		<%

    for (item of htmlWebpackPlugin.options.links) { %>
		<%
      if (typeof item === 'string' || item instanceof String) { item = { href: item, rel: 'stylesheet' } } %>
		<link<% for (key in item) { %>
			<%= key %>="
			<%= item[key] %>"
			<% } %> />
			<%
    } %>
			<%

    for (key in htmlWebpackPlugin.files.css) { %>
			<%
      if (htmlWebpackPlugin.files.cssIntegrity) { %>
			<link href="<%= htmlWebpackPlugin.files.css[key] %>" rel="stylesheet" integrity="<%= htmlWebpackPlugin.files.cssIntegrity[key] %>" crossorigin="<%= webpackConfig.output.crossOriginLoading %>" />
			<%
      } else { %>
			<link href="<%= htmlWebpackPlugin.files.css[key] %>" rel="stylesheet" />
			<%
      } %>
			<%
    } %>
			<%
    if (htmlWebpackPlugin.options.headHtmlSnippet) { %>
			<%= htmlWebpackPlugin.options.headHtmlSnippet %>
			<%
    }
		%>

			<%
    for (key in htmlWebpackPlugin.files.chunks) { %>
			<%
      if (htmlWebpackPlugin.files.jsIntegrity) { %>
			<script defer src="<%= htmlWebpackPlugin.files.chunks[key].entry %>" type="module" integrity="<%= htmlWebpackPlugin.files.jsIntegrity[htmlWebpackPlugin.files.js.indexOf(htmlWebpackPlugin.files.chunks[key].entry)] %>" crossorigin="<%= webpackConfig.output.crossOriginLoading %>"></script>
			<%
      } else { %>
			<script defer src="<%= htmlWebpackPlugin.files.chunks[key].entry %>" type="module"></script>
			<%
      } %>
			<%
    }

		%>

			<script defer="defer" src="css~main.js" type="module"></script>
			<script defer="defer" src="css~entry.js" type="module"></script>
			<!-- EXTRA SCRIPTS
	  <script defer="defer" src="home.rs.js" type="module"></script>
			<%

	    for (item of htmlWebpackPlugin.options.scripts) { %><%
	      if (typeof item === 'string' || item instanceof String) { item = { src: item, type: 'text/javascript' } } %>
	    <script defer <% for (key in item) { %> <%= key %>="<%= item[key] %>"<% } %>></script><%
	    } %>
	  -->



			<%
    if (htmlWebpackPlugin.options.unsupportedBrowser) { %>
			<style>.unsupported-browser { display: none; }</style>
			<div class="unsupported-browser">
				Sorry, your browser is not supported. Please upgrade to the latest version or switch your browser to use this
				site. See <a href="http://outdatedbrowser.com/">outdatedbrowser.com</a> for options.
			</div>
			<%
    } %>
			<%

    if (htmlWebpackPlugin.options.bodyHtmlSnippet) { %>
			<%= htmlWebpackPlugin.options.bodyHtmlSnippet %>
			<%
    } %>
			<%

    if (htmlWebpackPlugin.options.appMountId) { %>
			<div id="<%= htmlWebpackPlugin.options.appMountId %>">
				<%
      if (htmlWebpackPlugin.options.appMountHtmlSnippet) { %>
				<%= htmlWebpackPlugin.options.appMountHtmlSnippet %>
				<%
      } %>
			</div>
			<%
    } %>
			<%

    for (item of htmlWebpackPlugin.options.appMountIds) { %>
			<div id="<%= item %>"></div>
			<%
    } %>
			<%

    if (htmlWebpackPlugin.options.window) { %>
			<script type="text/javascript">
				<%
      for (key in htmlWebpackPlugin.options.window) { %>
				window['<%= key %>'] = <%= JSON.stringify(htmlWebpackPlugin.options.window[key]) %>;
				<%
      } %>
			</script>
			<%
    } %>
			<%

    if (htmlWebpackPlugin.options.inlineManifestWebpackName) { %>
			<%= htmlWebpackPlugin.files[htmlWebpackPlugin.options.inlineManifestWebpackName] %>
			<%
    } %>
			<%
 %>
			<%

    if (htmlWebpackPlugin.options.devServer) { %>
			<script src="<%= htmlWebpackPlugin.options.devServer %>/webpack-dev-server.js" type="text/javascript"></script>
			<%
    } %>




		<!-- BACKGROUND -->


<script rel="prefetch" type="application/x-javascript" >

				/////////////////////////////
				/// RyanSpice.Com - Spice.js
				/// 08/22/2014

				var Snowboarding = {Menu:{}};
				Snowboarding.Menu = {
					name:"Menu",
					backgroundPos:0,
					End:1,
					init:function() {
						this.l = 0;
						this.h = 1;
						this.v = 0.1;
						this.x = 0;
						this.y = 0;
						this.s = 1;
						this.ss = 0;
						this.FogY = 0;
						this.FogY2 = 0;
						this.fader = 0;
						this.fade = false;
						this.StartAlpha = 0;
						this.FogY = 0;
						this.xxx = 0;
						this.selecter = 0;
						this.boxoffset = 0;
						this.revAngle = 0;
						this.gallery = [];
						this.alpha = [];
						this.alpha[0] = 1;
						this.alpha[1] = 1;
						this.alpha[2] = 1;
						this.alpha[3] = 1;
						this.alpha[4] = 1;
						this.alpha[5] = 1;
						this.alpha[6] = 1;
						this.gallery[0] = this.graphics.load("sb",        "https://ryanspice.com/images/image_title_SnowBoarding");
						this.gallery[3] = this.graphics.load("fr",        "https://ryanspice.com/images/image_title_KongQuest");
						this.gallery[4] = this.graphics.load("rv",        "https://ryanspice.com/images/image_title_ReverenceLost");
						this.gallery[1] = this.graphics.load("flappyfish","https://ryanspice.com/images/image_title_FlappyFish");
						this.gallery[2] = this.graphics.load("bovxel",    "https://ryanspice.com/images/image_title_Bovxel");

						this.galleryFlappyBackgrounds = [];
						this.galleryFlappyBackgrounds[0] = this.graphics.load("FF0","https://ryanspice.com/images/FlappyFish/FlappyFishClouds");
						this.galleryFlappyBackgrounds[1] = this.graphics.load("FF1","https://ryanspice.com/images/FlappyFish/FlappyFishGradient");
						this.galleryFlappyBackgrounds[2] = this.graphics.load("FF2","https://ryanspice.com/images/FlappyFish/FlappyFishGround");
						this.galleryFlappyBackgrounds[3] = this.graphics.load("FF3","https://ryanspice.com/images/FlappyFish/FlappyFishWave");
						this.galleryFlappyBackgrounds[1].width = this.app.client.setWidth;
						this.galleryFlappyBackgrounds[1].height = this.app.client.setHeight;

						this.gallerySnowBackgrounds = [];
						this.gallerySnowBackgrounds[0] = this.graphics.load("eh","https://ryanspice.com/images/SnowBoarding/bg_m1.min");
						this.gallerySnowBackgrounds[1] = this.graphics.load("be","https://ryanspice.com/images/SnowBoarding/bg_m2.min");
						this.gallerySnowBackgrounds[2] = this.graphics.load("ce","https://ryanspice.com/images/SnowBoarding/bg_fog1.min");
						this.gallerySnowBackgrounds[3] = this.graphics.load("de","https://ryanspice.com/images/SnowBoarding/bg_fog2.min");
						this.gallerySnowBackgrounds[4] = this.graphics.load("ee","https://ryanspice.com/images/SnowBoarding/bg_cloud1.min");
						this.gallerySnowBackgrounds[5] = this.graphics.load("ef","https://ryanspice.com/images/SnowBoarding/bg_cloud2.min");
						this.gallerySnowBackgrounds[6] = this.graphics.load("je","https://ryanspice.com/images/SnowBoarding/bg_m3.min");
						this.gallerySnowBackgrounds[7] = this.graphics.load("je","https://ryanspice.com/images/SnowBoarding/background_SnowBoarding");

						this.galleryKongBackgrounds = [];
						this.galleryKongBackgrounds[0] = this.graphics.load("kongquest00","https://ryanspice.com/images/KongQuest/45272.min");
						this.galleryKongBackgrounds[1] = this.graphics.load("kongquest01","https://ryanspice.com/images/KongQuest/26894.min");
						this.galleryKongBackgrounds[2] = this.graphics.load("kongquest02","https://ryanspice.com/images/KongQuest/guy1.min");
						this.galleryKongBackgrounds[3] = this.graphics.load("kongquest03","https://ryanspice.com/images/KongQuest/skullkart.min");
						this.galleryKongBackgrounds[4] = this.graphics.load("kongquest04","https://ryanspice.com/images/KongQuest/rail");

						this.galleryRevBackgrounds = [];
						this.galleryRevBackgrounds[0] = this.graphics.load("revBG1","https://ryanspice.com/images/ReverenceLost/reverenceBackground1.min");
						this.galleryRevBackgrounds[1] = this.graphics.load("revBG2","https://ryanspice.com/images/ReverenceLost/reverenceBackground2.min");
						this.galleryRevBackgrounds[2] = this.graphics.load("revBG3","https://ryanspice.com/images/ReverenceLost/reverenceBackground3.min");
						this.galleryRevBackgrounds[3] = this.graphics.load("revBG3","https://ryanspice.com/images/ReverenceLost/reverenceBackground4.min");
						this.galleryRevBackgrounds[4] = this.graphics.load("revBG3","https://ryanspice.com/images/ReverenceLost/reverenceBackground5.min");
						this.galleryRevBackgrounds[5] = this.graphics.load("revBG3","https://ryanspice.com/images/ReverenceLost/reverenceBackground0.min");
						this.galleryRevBackgrounds[6] = this.graphics.load("revBG6","https://ryanspice.com/images/ReverenceLost/blackhole");



						this.galText = [];
						this.galText[0] = ["The glory of old Ski-Free,",
											"the intensity of downhill board surfing,",
												"all in the palm of your hand!"];
						this.galText[1] = ["Remember Flappy Bird? Neither do I.",
											"In the memorial of the Flappiest of Birds,",
												"Flappy Fish!"];
						this.galText[2] = ["Bovxel is a pathfinding bonanza!",
											"Your goal? reveal the map amongst the chaos!",
												"Hand crafted at Toronto Global Gamejam"];
						this.galText[3] = ["Remember the classic SNES game Donkey Kong?",
											"Mine Carts, Html5, and The Monkeys!",
												"Use touch controls to collect the bananas!"];
						this.galText[4] = ["Deep in the mind of Scott Humes, lives",
											"Reverence Lost!",
												"A space journey of impeccable conundrums!"];

						this.rev = this.graphics.load("rev","https://ryanspice.com/images/ReverenceLost/sb011");
						this.sel =0;
						this.WaterY = 0;
						this.viewX = 0;
						this.cloudX = 0;
						this.cloudSize = 25;
						this.cx=[];
				        this.gallery_function(this.gallery,Math.floor(Math.random()*this.gallery.length));
						this.cc = 20 + Math.floor(this.app.client.setWidth/this.cloudSize);

						for(var i=this.cc;i>=0;--i)
							this.cx[i] = i*this.cloudSize;

						this.flappyfishArray = [];
						this.flappyfishArray[0] = this.graphics.load("F00","https://ryanspice.com/images/FlappyFish/FlappyFish0");
						this.flappyfishArray[1] = this.graphics.load("F02","https://ryanspice.com/images/FlappyFish/FlappyFish1");
						this.flappyfishArray[2] = this.graphics.load("F01","https://ryanspice.com/images/FlappyFish/FlappyFish2");


						this.homeReadMore = this.graphics.load("https://ryanspice.com/images/images/readmore");
						this.homePlayGame = this.graphics.load("https://ryanspice.com/images/images/playnow");
						this.homeReadMore.width = 150;
						this.homePlayGame.width = 150;

						this.app.canvas.background_set("#000000");
						this.lfogY = 0;

						this.sy = 0;
						this.game2 = 0;
				    return true;
				    },
					update:function() {
						this.FogY-=1*this.app.delta;
						this.lastFogY = this.fogY;
						this.fogY = Math.sin(this.FogY/100);
						this.y+=(this.v*this.s)*(this.app.delta);
						this.StartAlpha+= 0.03*this.End*this.app.delta;

						this.backgroundPos = Math.sin(this.y/this.app.client.setWidth);
						this.FogY2 =(1+Math.sin(this.FogY/180)*0.5);
						this.FogY3 = 0.5+this.FogY2;
						this.FogY4 =(0.6+Math.sin(this.FogY/90)*0.5);

						0.9<this.StartAlpha&&(this.StartAlpha=0.9);-3>this.StartAlpha&&(this.StartAlpha=-3);
						this.y<-this.gallerySnowBackgrounds[0].width/4?1>this.v&&(this.v+=0.001*this.app.delta):this.y>this.gallerySnowBackgrounds[0].width/4&&-1<this.v&&(this.v-=0.001*this.app.delta);

						if (this.WaterY<0)
							{
							this.WaterY+=App.client.delta*1;
							return;
							}

						this.viewX +=App.client.delta*1;
						if (this.cloudX>-140)
							this.cloudX -= App.client.delta*1;
						else{
							this.cloudX = this.app.client.setWidth + 140;
							this.cloudY = Math.random()*200;
							}
						for(var i=this.cc;i>=0;--i)
								if (-this.viewX +this.cx[i]<-this.cloudSize*5)
									this.cx[i] = this.viewX +this.app.client.setWidth+this.cloudSize*5;

				var doc = document.documentElement;
				//var left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
				var top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);
				        //this.sy = top;
				        var a = (-this.sy+top*0.6)/2;
				        if (this.sy<top*0.6)
				        this.sy+=a;

				        if (this.sy>top*0.6)
				        this.sy+=a;
				    return true;
					},
				    backgroundFunction2:function(a){
				        this.game = a;
						this.gallery[0] = this.graphics.load("sb",        "https://ryanspice.com/images/image_title_SnowBoarding");
						this.gallery[3] = this.graphics.load("fr",        "https://ryanspice.com/images/image_title_KongQuest");
						this.gallery[4] = this.graphics.load("rv",        "https://ryanspice.com/images/image_title_ReverenceLost");
						this.gallery[1] = this.graphics.load("flappyfish","https://ryanspice.com/images/image_title_FlappyFish");
						this.gallery[2] = this.graphics.load("bovxel",    "https://ryanspice.com/images/image_title_Bovxel");

				                            if ((this.game == "SnowBoarding")||(this.game2 == "sb"))
				                            {
				                                //this.sy*=0.1;
				                                //this.app.client.scale *= 1.1;
				                                this.backgroundFunction('sb');
				                                return;
				                             var s  =this.sy;
				                                this.sy = s*0.01;
				                            this.visuals.image_ext(this.gallerySnowBackgrounds[0],this.app.client.setWidth*0.5-this.gallerySnowBackgrounds[0].width/2+this.backgroundPos*200,this.sy*0,1.3,1,0);
				                                 this.sy =this.sy/1.5;
				                            this.visuals.image(this.gallerySnowBackgrounds[1],this.app.client.setWidth*0.5-this.gallerySnowBackgrounds[6].width/2+this.backgroundPos*300,25+this.sy);
				                            this.sy =this.sy/2;
				                            this.visuals.image_ext(this.gallerySnowBackgrounds[2],this.app.client.setWidth*0.5-this.backgroundPos*900,this.app.client.setHeight/1.4-this.fogY+this.sy,1,1,1);
				                            this.visuals.image_ext(this.gallerySnowBackgrounds[2],this.app.client.setWidth*0.5+this.backgroundPos*900,this.app.client.setHeight/1.4-this.fogY+this.sy,1,1,1);
				                                 this.sy =this.sy/1.5;
				                            this.visuals.image(this.gallerySnowBackgrounds[6],this.app.client.setWidth*0.5-this.gallerySnowBackgrounds[1].width/2+this.backgroundPos*600,0+this.sy);
				                            this.visuals.image_ext(this.gallerySnowBackgrounds[3],this.app.client.setWidth*0.5-this.backgroundPos*800,this.app.client.setHeight-this.gallerySnowBackgrounds[3].height/2-this.fogY+this.sy,1,1,1);
				                            this.visuals.image_ext(this.gallerySnowBackgrounds[3],this.app.client.setWidth*0.5+this.backgroundPos*800,this.app.client.setHeight-this.gallerySnowBackgrounds[3].height/2-this.fogY+this.sy,1,this.FogY3,1);
				                                 this.sy =this.sy/1.5;
				                            this.visuals.image_ext(this.gallerySnowBackgrounds[2],this.app.client.setWidth*0.5+this.backgroundPos*300,this.app.client.setHeight-this.gallerySnowBackgrounds[2].height/3-this.fogY*13+this.sy,this.FogY3,this.FogY4,1);
				                            this.visuals.image_ext(this.gallerySnowBackgrounds[2],this.app.client.setWidth*0.5-this.backgroundPos*300,this.app.client.setHeight-this.gallerySnowBackgrounds[2].height/3-this.fogY*13+this.sy,this.FogY3,this.FogY4,1);
				                            this.visuals.image_ext(this.gallerySnowBackgrounds[2],this.app.client.setWidth*0.5-this.backgroundPos*300,this.app.client.setHeight-this.gallerySnowBackgrounds[2].height*0.2-this.fogY*13+this.sy,this.FogY3,this.FogY4,1);
				                                this.sy =s;
				                            this.visuals.image_ext(this.gallerySnowBackgrounds[4],this.app.client.setWidth*0.5+this.backgroundPos*900,this.app.client.setHeight*0.5-this.gallerySnowBackgrounds[4].height*0.5+this.sy,1,0.5,1);
				                            this.visuals.image_ext(this.gallerySnowBackgrounds[5],this.app.client.setWidth*0.5+this.backgroundPos*700,this.app.client.setHeight*0.5-this.gallerySnowBackgrounds[5].height*0.5+this.sy,1, 0.5,1);


				                            this.visuals.rect_ext(-this.app.client.setWidth*0.7, 0,-this.app.client.setWidth/this.app.client.scale,this.app.client.setHeight+this.sy,1,1,0,"#000000");


				                            this.visuals.rect_ext(this.app.client.setWidth*1.7, 0,this.app.client.setWidth/this.app.client.scale,this.app.client.setHeight+this.sy,1,1,0,"#000000");
				                            }
				                            if ((this.game == "KongQuest")||(this.game2 == "fr"))
				                            {
				                                this.backgroundFunction('fr');
				                                return;
				                                var w = this.galleryKongBackgrounds[0].width;
				                                var h = this.galleryKongBackgrounds[0].height;
				                                for(var y=Math.ceil(window.innerHeight/h)+1;y>=0;--y){
				                                for(var i=Math.ceil(window.innerWidth/w);i>=0;--i){
				                                    this.visuals.image_ext(this.galleryKongBackgrounds[0],this.app.client.setWidth*0.5+i*w,0+y*h+this.sy*0.01,1,1,1);
				                                    this.visuals.image_ext(this.galleryKongBackgrounds[0],this.app.client.setWidth*0.5-i*w,0+y*h+this.sy*0.01,1,1,1);

				                                }}

				                                var w = this.galleryKongBackgrounds[2].width*2;
				                                for(var i=Math.ceil(window.innerWidth/w);i>=0;--i){
				                                    this.visuals.image_ext(this.galleryKongBackgrounds[4],this.app.client.setWidth*0.5+i*w,600+this.sy*0.15,1,1,1);
				                                    this.visuals.image_ext(this.galleryKongBackgrounds[4],this.app.client.setWidth*0.5-i*w,600+this.sy*0.15,1,1,1);
				                                }

				                                if (this.lastFogY>this.fogY)
				                                    this.visuals.image_ext(this.galleryKongBackgrounds[2],this.app.client.setWidth*0.5-this.fogY*this.app.client.setWidth,475+this.sy*0.15,1,1,0);
				                                else
				                                    this.visuals.image_ext(this.galleryKongBackgrounds[3],this.app.client.setWidth*0.5+this.fogY*900,482+this.sy*0.15,1,1,0);
				                                //this.backgroundFunction('fr');
				                            }
				                            if ((this.game == "FlappyFish")||(this.game2 == "flappyfish"))
				                            {
				                                this.backgroundFunction("flappyfish");
				                                return;
				                                this.app.canvas.background_set("#000000");
				                                for(var i=-1;i<=1;i++)
				                                {
				                                    if (this.docw<720)
				                                        if (i!=1)
				                                        return;
				                                    var x = i*-this.galleryFlappyBackgrounds[1].width;
				                                this.visuals.image_ext(this.galleryFlappyBackgrounds[1],x,0+this.sy*0,1,1,0);
				                                    var x = i*-this.galleryFlappyBackgrounds[2].width*0.9;
				                                this.visuals.image_ext(this.galleryFlappyBackgrounds[2],x,this.app.client.setHeight*0.85+this.sy,0.93,1,0);
				                                }

				                                for(var i=-1;i<=1;i++)
				                                {
				                                    var x = i*-this.galleryFlappyBackgrounds[0].width*0.89;
				                                    this.visuals.image_ext(this.galleryFlappyBackgrounds[0],x,this.app.client.setHeight*0.55+this.sy/2,0.93,0.8,0);
				                                }
				                                this.viewX+=100;
				                                for(var i=4*5;i>0;i-=4)
				                                {
				                                    var x = this.app.client.setWidth-Math.sin(this.viewX/100)*6+this.viewX -this.cx[i]-25;
				                                    var y = Math.sin((this.viewX+1500)/50/i)*255+100 +this.app.client.setHeight*0.4 + this.WaterY+this.sy;
				                                    if (x>0)
				                                        if (x<this.app.client.setWidth)
				                                    this.visuals.image_ext(this.flappyfishArray[1-Math.round(Math.cos(this.viewX/5)*1)],x,y,-1,1,0);
				                                }
				                                this.viewX-=100;

				                                for(var ii=-1;ii<=1;ii++)
				                                for(var i=this.cc;i>=0;--i)
				                                {
				                                    var x = (ii*this.app.client.setWidth) + Math.sin(this.viewX/100)*6-this.viewX +this.cx[i]-25;
				                                    this.visuals.circle(x,Math.sin((this.viewX+i)/100)*Math.sin(i/2)*5+ this.app.client.setHeight*0.82 + this.WaterY+this.sy/3,this.cloudSize,'#1C6FA0',0.7);
				                                    var x = Math.cos(this.viewX/50)*6-this.viewX +this.cx[i]+25;
				                                    this.visuals.circle(x,-Math.sin((this.viewX+i)/45)*Math.cos(i/2)*5+ this.app.client.setHeight*0.82 - 0  + this.WaterY+this.sy/3,this.cloudSize,'#1F6FA0',0.7);
				                                }

				                                this.visuals.rect_ext(-this.app.client.setWidth, +this.app.client.setHeight*0.87+ this.WaterY-28+this.sy/3,this.app.client.setWidth*3,200- this.WaterY,1,0.8,0,"#1C6BA0");

				                                this.visuals.rect_ext(-this.app.client.setWidth*0.7, 0+this.sy/3,-this.app.client.setWidth/this.app.client.scale,this.app.client.setHeight,1,1,0,"#000000");


				                                this.visuals.rect_ext(this.app.client.setWidth*1.7, 0+this.sy/3,this.app.client.setWidth/this.app.client.scale,this.app.client.setHeight,1,1,0,"#000000");
				                            }

				                            if ((this.game == "ReverenceLost")||(this.game2 == "rv"))
				                            {

				                                this.backgroundFunction("rv");
				                                return;
				                            this.app.canvas.background_set("#000000");
				                            this.visuals.image_ext(this.galleryRevBackgrounds[5],this.app.client.setWidth/2,0,1,0.4+Math.cos(this.revAngle/160)*0.1,1);

				                            this.visuals.image_rotate(this.galleryRevBackgrounds[2],this.app.client.setWidth*1-this.galleryRevBackgrounds[2].width/2+this.backgroundPos*200+this.revAngle/1000,1+this.revAngle/1000,0.5,this.revAngle/100,1,0.5);




				                            this.visuals.image_ext(this.galleryRevBackgrounds[1],+this.sy+this.app.client.setWidth*1.75-this.gallerySnowBackgrounds[0].width/2-this.backgroundPos*300,0,1,0.2,0);
				                            this.visuals.image_ext(this.galleryRevBackgrounds[3],+this.sy+this.app.client.setWidth*0.75-this.gallerySnowBackgrounds[0].width/2+this.backgroundPos*400,-this.app.client.setHeight/2,1,0.7,0);

				                            this.visuals.image_ext(this.galleryRevBackgrounds[0],-this.sy*2+this.app.client.setWidth*0.5-this.gallerySnowBackgrounds[0].width/4-this.backgroundPos*600,0-this.sy,1,1,0);
				                            this.visuals.image_ext(this.galleryRevBackgrounds[4],-this.sy+this.app.client.setWidth*1-this.gallerySnowBackgrounds[0].width/2+this.backgroundPos*500,this.app.client.setHeight/2+this.sy,1,0.7,0);
				                            }

				                            if (this.game == "Bovxel")
				                            {
				                                var size = 60;
				                                var bg = 1;
				                                var wl = App.client.setWidth/size;
				                                var hl = App.client.setHeight/size;
				                                this.app.canvas.background_set("#FFFFFF");
				                                for (var i = 0;i<wl;i++)
				                                    for (var ii = 0;ii<hl;ii++)
				                                    {
				                                        bg = 0.4*Math.sin(i*ii+this.backgroundPos*100);
				                                        var p = {x:+this.app.client.setWidth/6,y:this.app.client.setHeight/2};
				                                        var aa = (this.app.client.Math.Vector.Difference({x:10.3*i,y:size*1.03*ii}, p).x/120);
				                                        var aa2 =(this.app.client.Math.Vector.Difference({x:10.3*i,y:size*1.03*ii},p).y/100) ;
				                                        aa = Math.sqrt(aa*aa);
				                                        aa2 = Math.sqrt(aa2*aa2);

				                                        var s = 1.1-(aa+aa2)*0.9;


				                                        if ((1-(aa2+aa))>0)
				                                        {
				                                            this.visuals.rect_ext(+(size*1.03*i),1+(size*1.03*ii),size,size,1,1-(aa2+aa),0.5,"#040404")
				                                            if (1-(aa2+aa)<0.2)
				                                            {
				                                                this.visuals.rect_ext(
				                                                            +(size*1.03*i),
				                                                            1+(size*1.03*ii),
				                                                                size+Math.random()*5,
				                                                                size+Math.random()*5+Math.sin(+(size*1.03*i)),
				                                                                1,1-(aa2+aa),1,"#000000");
				                                                var r = (-((size* i)+(size*0.03*i))+p.x);
				                                                r = r*r/5000;
				                                                if (r<0)
				                                                    r = 0;
				                                                this.visuals.rect_ext(
				                                                        +(size*1.03*i),
				                                                        1+(size*1.03*ii),
				                                                            0+(p.x-(size*1.03*i))*0.6,
				                                                            size,
				                                                            1,1-(aa2+aa),1,"#000000");
				                                            }
				                                        }
				                                        else
				                                            this.visuals.rect_ext(0+(size*1.03*i),0+(size*1.03*ii),size,size,1.0,bg-0.1,0.5,"#000000")
				                                        this.visuals.rect_ext(+(size*1.03*i),1+(size*1.03*ii),size,size,1,1-(aa2+aa),0.5,"#040404");
				                                        }


																								/**
																								 * LOGO
																								 * @type {[type]}
																								 */

															                    this.visuals.image_ext(this.gallery[2],this.app.client.setWidth/2,170-this.sy*0.75,0.6 + ( 1 * Math.cos(new Date().getTime()/360)/100),1,1);
				                                }
				    },

						/**
						 * SJS FUNCTION TO DRAW EACH SCENE
						 * @param  {[type]} a [description]
						 * @return {[type]}   [description]
						 */

				    backgroundFunction:function(a){
				        this.game2 = a;
				      switch(a){
								case 'sb':

                  var s  =this.sy;
                  this.sy = s/10;
									//this.visuals.image_ext(this.gallerySnowBackgrounds[0],this.app.client.setWidth*0.5-this.gallerySnowBackgrounds[0].width/2+this.backgroundPos*200,-0+this.sy*0.1,1.3,1,0);
									this.visuals.image_ext(this.gallerySnowBackgrounds[7],this.app.client.setWidth*0.5-this.gallerySnowBackgrounds[0].width/2+this.backgroundPos*200,-200+this.sy*0,1.3,1,0);
									this.visuals.image_ext(this.gallerySnowBackgrounds[0],this.app.client.setWidth*0.5-this.gallerySnowBackgrounds[0].width/2+this.backgroundPos*200,this.sy,1.3,1,0);
				                         this.sy =this.sy/1.5;
									this.visuals.image(this.gallerySnowBackgrounds[1],this.app.client.setWidth*0.5-this.gallerySnowBackgrounds[6].width/2+this.backgroundPos*300,25+this.sy);
				                    this.sy =this.sy/2;
									this.visuals.image_ext(this.gallerySnowBackgrounds[2],this.app.client.setWidth*0.5-this.backgroundPos*900,this.app.client.setHeight/1.4-this.fogY+this.sy,1,1,1);
									this.visuals.image_ext(this.gallerySnowBackgrounds[2],this.app.client.setWidth*0.5+this.backgroundPos*900,this.app.client.setHeight/1.4-this.fogY+this.sy,1,1,1);
				                         this.sy =this.sy/1.5;
									this.visuals.image(this.gallerySnowBackgrounds[6],this.app.client.setWidth*0.5-this.gallerySnowBackgrounds[1].width/2+this.backgroundPos*600,0+this.sy);
									this.visuals.image_ext(this.gallerySnowBackgrounds[3],this.app.client.setWidth*0.5-this.backgroundPos*800,this.app.client.setHeight-this.gallerySnowBackgrounds[3].height/2-this.fogY+this.sy,1,1,1);
									this.visuals.image_ext(this.gallerySnowBackgrounds[3],this.app.client.setWidth*0.5+this.backgroundPos*800,this.app.client.setHeight-this.gallerySnowBackgrounds[3].height/2-this.fogY+this.sy,1,this.FogY3,1);
				                         this.sy =this.sy/1.5;
									this.visuals.image_ext(this.gallerySnowBackgrounds[2],this.app.client.setWidth*0.5+this.backgroundPos*300,this.app.client.setHeight-this.gallerySnowBackgrounds[2].height/3-this.fogY*13+this.sy,this.FogY3,this.FogY4,1);
									this.visuals.image_ext(this.gallerySnowBackgrounds[2],this.app.client.setWidth*0.5-this.backgroundPos*300,this.app.client.setHeight-this.gallerySnowBackgrounds[2].height/3-this.fogY*13+this.sy,this.FogY3,this.FogY4,1);
									this.visuals.image_ext(this.gallerySnowBackgrounds[2],this.app.client.setWidth*0.5-this.backgroundPos*300,this.app.client.setHeight-this.gallerySnowBackgrounds[2].height*0.2-this.fogY*13+this.sy,this.FogY3,this.FogY4,1);
				                        this.sy =s/4.5;
									this.visuals.image_ext(this.gallerySnowBackgrounds[4],this.app.client.setWidth*0.5+this.backgroundPos*900,this.app.client.setHeight*0.5-this.gallerySnowBackgrounds[4].height*0.5+this.sy,1,0.5,1);
									this.visuals.image_ext(this.gallerySnowBackgrounds[5],this.app.client.setWidth*0.5+this.backgroundPos*700,this.app.client.setHeight*0.5-this.gallerySnowBackgrounds[5].height*0.5+this.sy,1, 0.5,1);


									this.visuals.rect_ext(-this.app.client.setWidth*0.7, 0,-this.app.client.setWidth/this.app.client.scale,this.app.client.setHeight+this.sy,1,1,0,"#000000");


									this.visuals.rect_ext(this.app.client.setWidth*1.7, 0,this.app.client.setWidth/this.app.client.scale,this.app.client.setHeight+this.sy,1,1,0,"#000000");

									/**
									 * LOGO
									 * @type {[type]}
									 */

                    this.visuals.image_ext(this.gallery[0],this.app.client.setWidth/2,190-(s),0.6 + ( 1 * Math.cos(new Date().getTime()/360)/100),1,1);

								break;
								case 'fr':
									var w = this.galleryKongBackgrounds[0].width;
									var h = this.galleryKongBackgrounds[0].height;
									for(var y=Math.ceil(window.innerHeight/h)+1;y>=0;--y){
									for(var i=Math.ceil(window.innerWidth/w);i>=0;--i){
										this.visuals.image_ext(this.galleryKongBackgrounds[0],this.app.client.setWidth*0.5+i*w,0+y*h+this.sy,1,1,1);
										this.visuals.image_ext(this.galleryKongBackgrounds[0],this.app.client.setWidth*0.5-i*w,0+y*h+this.sy,1,1,1);

									}}
									var w = this.galleryKongBackgrounds[1].width*2;
									var h = this.galleryKongBackgrounds[1].height*1;
									for(var y=Math.ceil(window.innerHeight/h)+1;y>=0;--y){
									for(var i=Math.ceil(window.innerWidth/w);i>=0;--i){
										this.visuals.image_ext(this.galleryKongBackgrounds[1],this.app.client.setWidth*0.5+i*w,0+y*h-this.sy,2,1,1);
										this.visuals.image_ext(this.galleryKongBackgrounds[1],this.app.client.setWidth*0.5-i*w,0+y*h-this.sy,2,1,1);

									}}

									var w = this.galleryKongBackgrounds[2].width*2;
									for(var i=Math.ceil(window.innerWidth/w);i>=0;--i){
										this.visuals.image_ext(this.galleryKongBackgrounds[4],this.app.client.setWidth*0.5+i*w,600+this.sy*0.15,1,1,1);
										this.visuals.image_ext(this.galleryKongBackgrounds[4],this.app.client.setWidth*0.5-i*w,600+this.sy*0.15,1,1,1);
									}

									if (this.lastFogY>this.fogY)
										this.visuals.image_ext(this.galleryKongBackgrounds[2],this.app.client.setWidth*0.5-this.fogY*this.app.client.setWidth,475+this.sy*0.15,1,1,0);
									else
										this.visuals.image_ext(this.galleryKongBackgrounds[3],this.app.client.setWidth*0.5+this.fogY*900,482+this.sy*0.15,1,1,0);


																			/**
																			 * LOGO
																			 * @type {[type]}
																			 */

										                    this.visuals.image_ext(this.gallery[3],this.app.client.setWidth/2,170-this.sy*0.75,0.58 + ( 1 * Math.cos(new Date().getTime()/360)/100),1,1);

								break;
								case 'rv':
									this.app.canvas.background_set("#000000");
									this.visuals.image_ext(this.galleryRevBackgrounds[5],this.app.client.setWidth/2,0.1*this.sy,1,0.4+Math.cos(this.revAngle/160)*0.1,1);

									this.visuals.image_rotate(this.galleryRevBackgrounds[2],this.app.client.setWidth*1-this.galleryRevBackgrounds[2].width/2+this.backgroundPos*200+this.revAngle/1000-this.sy*0.5+Math.sin(this.sy/100)*50,1+this.revAngle/1000+this.sy,0.5,this.revAngle/100,1,0.5);

									this.visuals.image_ext(this.galleryRevBackgrounds[1],+this.sy+this.app.client.setWidth*1.75-this.gallerySnowBackgrounds[0].width/2-this.backgroundPos*300,0+this.sy,1,0.2,0);
									this.visuals.image_ext(this.galleryRevBackgrounds[3],+this.sy +this.app.client.setWidth*0.75-this.gallerySnowBackgrounds[0].width/2+this.backgroundPos*400,-this.app.client.setHeight/2+this.sy*0.5,1,0.7,0);

									this.visuals.image_ext(this.galleryRevBackgrounds[0],-this.sy*2+this.app.client.setWidth*0.5-this.gallerySnowBackgrounds[0].width/4-this.backgroundPos*600,0-this.sy,1,1,0);
									this.visuals.image_ext(this.galleryRevBackgrounds[4],this.sy+this.app.client.setWidth*1-this.gallerySnowBackgrounds[0].width/2+this.backgroundPos*500,this.app.client.setHeight/2-this.sy,1,0.7,0);

				                           if (this.game){
				                        this.visuals.image_rotate(this.galleryRevBackgrounds[6],this.app.client.setWidth/2.05,160-this.sy*1.6,0.5,this.viewX/2,0.2,0.5);

				                        this.visuals.image_ext(this.gallery[4   ],this.app.client.setWidth/2,160-this.sy*1.6,0.5,1,1);
				                        this.visuals.image_rotate(this.galleryRevBackgrounds[6],this.app.client.setWidth/2.05,160-this.sy*1.6,0.5,-this.viewX/2,0.2,0.5);}
								break;

								case 'bovxel':
									return;
									var size = 60;
									var bg = 1;
									var wl = App.client.setWidth/size;
									var hl = App.client.setHeight/size;
									this.app.canvas.background_set("#FFFFFF");
									for (var i = 0;i<wl;i++)
										for (var ii = 0;ii<hl;ii++)
										{
											bg = 0.4*Math.sin(i*ii+this.backgroundPos*100);
											var p = {x:+this.app.client.setWidth/6,y:this.app.client.setHeight/2};
											var aa = (this.app.client.Math.Vector.Difference({x:10.3*i,y:size*1.03*ii}, p).x/120);
											var aa2 =(this.app.client.Math.Vector.Difference({x:10.3*i,y:size*1.03*ii},p).y/100) ;
											aa = Math.sqrt(aa*aa);
											aa2 = Math.sqrt(aa2*aa2);

											var s = 1.1-(aa+aa2)*0.9;


											if ((1-(aa2+aa))>0)
											{
												this.visuals.rect_ext(+(size*1.03*i),1+(size*1.03*ii),size,size,1,1-(aa2+aa),1,"#040404")
												if (1-(aa2+aa)<0.2)
												{
													this.visuals.rect_ext(
																+(size*1.03*i),
																1+(size*1.03*ii),
																	size+Math.random()*5,
																	size+Math.random()*5+Math.sin(+(size*1.03*i)),
																	1,1-(aa2+aa),1,"#000000");
													var r = (-((size* i)+(size*0.03*i))+p.x);
													r = r*r/5000;
													if (r<0)
														r = 0;
													this.visuals.rect_ext(
															+(size*1.03*i),
															1+(size*1.03*ii),
																0+(p.x-(size*1.03*i))*0.6,
																size,
																1,1-(aa2+aa),1,"#000000");
												}
											}
											else
												this.visuals.rect_ext(0+(size*1.03*i),0+(size*1.03*ii),size,size,1.0,bg-0.1,1,"#000000")
				                                   if (this.game)
											this.visuals.rect_ext(+(size*1.03*i),1+(size*1.03*ii),size,size,1,1-(aa2+aa),1,"#040404");
											}

				                        //if (this.game)
				                        //this.visuals.image_ext(this.gallery[2],this.app.client.setWidth/2,160,1,1,1);
								break;

								case 'flappyfish':

								//	this.app.canvas.background_set("#000000");
									for(var i=-1;i<=1;i++)
									{
				                        if (this.docw<720)
				                            if (i!=1)
				                            return;
										var x = i*-this.galleryFlappyBackgrounds[1].width;
									this.visuals.image_ext(this.galleryFlappyBackgrounds[1],x,0,1,1,0);
									this.visuals.image_ext(this.galleryFlappyBackgrounds[1],x,0+this.sy*0.1,1,1,0);
										var x = i*-this.galleryFlappyBackgrounds[2].width*0.9;
									this.visuals.image_ext(this.galleryFlappyBackgrounds[2],x,this.app.client.setHeight*0.85+this.sy,0.93,1,0);
									}

									for(var i=-1;i<=1;i++)
									{
										var x = i*-this.galleryFlappyBackgrounds[0].width*0.89;
										this.visuals.image_ext(this.galleryFlappyBackgrounds[0],x,this.app.client.setHeight*0.55+this.sy/2,0.93,0.8,0);
									}
									this.viewX+=100;
									for(var i=4*5;i>0;i-=4)
									{
										var x = this.app.client.setWidth-Math.sin(this.viewX/100)*6+this.viewX -this.cx[i]-25;
										var y = Math.sin((this.viewX+1500)/50/i)*255+100 +this.app.client.setHeight*0.4 + this.WaterY+this.sy;
										if (x>0)
											if (x<this.app.client.setWidth)
										this.visuals.image_ext(this.flappyfishArray[1-Math.round(Math.cos(this.viewX/5)*1)],x,y,-1,1,0);
									}
									this.viewX-=100;

									for(var ii=-1;ii<=1;ii++)
									for(var i=this.cc;i>=0;--i)
									{
										var x = (ii*this.app.client.setWidth) + Math.sin(this.viewX/100)*6-this.viewX +this.cx[i]-25;
										this.visuals.circle(x,Math.sin((this.viewX+i)/100)*Math.sin(i/2)*5+ this.app.client.setHeight*0.82 + this.WaterY+this.sy/3,this.cloudSize,'#1C6FA0',0.7);
										var x = Math.cos(this.viewX/50)*6-this.viewX +this.cx[i]+25;
										this.visuals.circle(x,-Math.sin((this.viewX+i)/45)*Math.cos(i/2)*5+ this.app.client.setHeight*0.82 - 0  + this.WaterY+this.sy/3,this.cloudSize,'#1F6FA0',0.7);
									}

									this.visuals.rect_ext(-this.app.client.setWidth, +this.app.client.setHeight*0.87+ this.WaterY-28+this.sy/3,this.app.client.setWidth*3,200- this.WaterY,1,0.8,0,"#1C6BA0");

									this.visuals.rect_ext(-this.app.client.setWidth*0.7, 0+this.sy/3,-this.app.client.setWidth/this.app.client.scale,this.app.client.setHeight,1,1,0,"#000000");


									this.visuals.rect_ext(this.app.client.setWidth*1.7, 0+this.sy/3,this.app.client.setWidth/this.app.client.scale,this.app.client.setHeight,1,1,0,"#000000");

									/**
									 * LOGO
									 * @type {[type]}
									 */

                    this.visuals.image_ext(this.gallery[1],this.app.client.setWidth/2,170-this.sy*0.75,0.60 + ( 1 * Math.cos(new Date().getTime()/360)/100),1,1);


								break;
								}

				    },
					draw:function() {
						this.revAngle++;
							var a = 15;
							var c = 3;
							var d = 6;
							if (this.graphics.getErrors())
							{
								this.xxx = this.y;
								var b = this.xxx/10;
								this.visuals.rect_ext(this.app.client.setWidth*0.5,this.app.client.setHeight*0.5,this.app.client.setWidth*3,this.app.client.setHeight, 1,1-Math.sin(b/10),true,"#000000");
								for(var i=8;i>=0;--i)
									this.visuals.circle(-7+this.app.client.setWidth/2+Math.cos((b+i)*7)*a,this.app.client.setHeight/1.5+Math.sin((b+i)*7)*a,c,"#663333",0.5-Math.sin(((b+i)*(1*7))+360*(-Math.sin(this.xxx/1080)*0.1))*0.5);
							}
							else
						if (this.galSwitchCount===0)
						{
							if (this.graphics.getErrors())
							{
								this.xxx = this.y;
								var b = this.xxx/10;
								this.visuals.rect_ext(this.app.client.setWidth*0.5,this.app.client.setHeight*0.5,this.app.client.setWidth*3,this.app.client.setHeight, 1,1-Math.sin(b/10),true,"#000000");
								for(var i=8;i>=0;--i)
									this.visuals.circle(-7+this.app.client.setWidth/2+Math.cos((b+i)*7)*a,this.app.client.setHeight/1.5+Math.sin((b+i)*7)*a,c,"#663333",0.5-Math.sin(((b+i)*(1*7))+360*(-Math.sin(this.xxx/1080)*0.1))*0.5);
							}
							else
							{
								this.backgroundFunction(this.gallery[this.sel].name);
							}

						}
						var h = 360;
						var l = this.l;
						this.l+=0.005*this.app.client.delta;
						var ox = 300;
						if (this.boxoffset<-ox)
								this.boxoffset = -ox;
							else
						if (this.boxoffset>ox)
								this.boxoffset = ox;
						this.gal();
						if (this.galF)
						{
							if (this.galFa<1)
							{
								this.galFa=this.app.client.Math.Clamp(this.galFa+0.15*this.app.client.delta,0,1);
							}
							else
							{
								this.galF = false;
								this.galSwitchCount++;
								this.gallery_function(this.galSwitchg,this.galSwitchi);
								this.galSwitch = false;
								this.galS=1;
								this.galF=false;
								this.galFr=false;
								if (this.galFa<1)
									this.galFa+=0.05*this.app.client.delta;
								this.galSwitch=false;
								this.galSwitchCount=0;
								this.fader = 0;
								this.fade = false;
								this.StartAlpha = 0;
							}
						}
						else
						{
							if (this.galFa>0.05)
								this.galFa-=0.05*this.app.client.delta;
						}
						this.visuals.rect_ext(this.app.client.setWidth/2,window.innerHeight/2,window.innerWidth
				                              ,window.innerHeight,1.5/this.app.client.scale,this.app.client.Math.Clamp(this.galFa,0,1),1,"#FFFFFF");
				    return true;
					},
					galS:1,
					galF:false,
					galFr:false,
					galFa:0,
					gallery:[],
					galSwitch:false,
					galSwitchi:0,
					galSwitchg:0,
					galSwitchCount:0,
					galGet:function(){
						return Snowboarding.Menu.gallery[Snowboarding.Menu.sel].name;
					},
					galRead:function(){
						switch(Snowboarding.Menu.galGet())
						{
							case 'flappyfish':
								window.location = "game.php?game=FlappyFish";
								break;
							case 'sb':
								window.location = "game.php?game=SnowBoarding";
								break;
							case 'bovxel':
								window.location = "game.php?game=Bovxel";

								break;
							case 'rv':
								window.location = "game.php?game=ReverenceLost";

								break;
							case 'fr':
								window.location = "game.php?game=KongQuest";
								break;
						}
					},
					galPlay:function(){
						switch(Snowboarding.Menu.galGet())
						{
							case 'flappyfish':
								window.location = "https://ryanspice.com/FlappyFish";
								break;
							case 'sb':
								window.location = "https://ryanspice.com/SnowBoarding";
								break;
							case 'bovxel':
								window.location = "https://ryanspice.com/Bovxel";

								break;
							case 'rv':
								window.location = "https://ryanspice.com/ReverenceLost";

								break;
							case 'fr':
								window.location = "https://ryanspice.com/KongQuest";
								break;
						}
					},
					gallery_function:function(g,i){

						var gtexttemp = this.galText[0];
						this.galText[0] = this.galText[i];
						this.galText[i] = gtexttemp;

						var gtemp = g[0]
						g[0] = g[i];
						g[i] = gtemp;
						this.sel = 0;
					},
				    _readmore:document.getElementById('_readmore'),
				    _playnow:document.getElementById('_playnow'),
					gal:function(){
						var w = window.innerWidth;
						var offx =25+ 0.2*w/2;
						var offy =0+ 0.1*w/2;
							offy = App.client.Math.Clamp(offy,15,50);
							offx = App.client.Math.Clamp(offx,15,300);
						for(var i=this.gallery.length-1;i>=0;--i)
						{
							if (w<1)
								if (i!=0)
									continue;
							var g = this.gallery;
							var d = App.client.Math.Clamp(offx,50,200);
							var r = 0;
								if (i==0)
									d= 0,r=-100;
								if (i==2)
									d= d,r=+50-offy;
								if (i==3)
									d= d,r=75+offy;
								if (i==4)
									d= d,r=150;
								if (i==5)
									d= 100,r=000;
								if (i==6)
									d= 00,r=50;
							if (this.visuals.image_button(g[i],+(i==0?-d:0)+this.app.client.setWidth/2+((i%2==0)?d+this.sy:-d-this.sy),(i==0?-this.galFa*0:0)+225-r+this.alpha[i]*700-this.sy,(true?-this.galFa*0.65:0)+0.65+this.alpha[i]-(i==0?0:0.2),function(){
								if (i==0)
									return;
								Snowboarding.Menu.galF = true;
								Snowboarding.Menu.galSwitch = true;
								Snowboarding.Menu.galSwitchi = i;
								Snowboarding.Menu.galSwitchg = g;
								},this.gallery,1,1,1, 1))
							{

							var a = 0.01/(this.app.client.delta);
							this.alpha[i]+=0.001*this.app.client.delta;
							}
							if (i==0)
							{
								//this.visuals.image_button(this.homeReadMore,+offx+this.app.client.setWidth/2,offy+500,(true?-this.galFa*0.65:0)+1+this.alpha[i]-(i==0?0:0.2),this.galRead,this.gallery,1,1,1,1);

				                    this._readmore.onclick = function(){Snowboarding.Menu.galRead()};
				                    this._playnow.onclick = function(){Snowboarding.Menu.galPlay()};
								if (w>1024){
				                    //this.visuals.image_button(this.homeReadMore,-offx+this.app.client.setWidth/2-this.sy,-offy+500-this.sy,1.2,this.galRead,this.gallery,1,1,1,1);
								this.visuals.text_ext(this.galText[i][0],+offx/2+this.app.client.setWidth/2+this.sy,-offy+475-this.sy,"#FFFFFF",1,1,0);
								this.visuals.text_ext(this.galText[i][1],+offx/2+this.app.client.setWidth/2+this.sy,-offy+500-this.sy,"#FFFFFF",1,1,0);
								this.visuals.text_ext(this.galText[i][2],+offx/2+this.app.client.setWidth/2+this.sy,-offy+525-this.sy,"#FFFFFF",1,1,0);}
				                else{
				                // this.visuals.image_button(this.homeReadMore,+this.app.client.setWidth/2,-offy+500+this.sy*10,1.2,this.galRead,this.gallery,1,1,1,1);
				                }
							}
							var a = 0.91/(this.app.client.delta);
							this.alpha[i]*=a;
						}
					}
				};
</script>

<!-- SPICEJS -->

<script  rel="prefetch"  defer type="application/x-javascript">
				/*
				 ,-.
				(   `     o            o
				 `-.  ;-. . ,-. ,-.    , ,-.
				.   ) | | | |   |-'    | `-.
				 `-'  |-' ' `-' `-' o  | `-'
				      '               -'
					  Created By: Ryan Spice-Finnie

				*/

				/*jslint node: true */
				/*jshint strict:false */
				/* jshint -W097 */

				"use strict";



				/*
				var A = Object.create(null,{name:{value:"eh"}});


				var Properties = Object.create(null,{
						value:{
								writeable:true,
								configurable:true,
								value:""
							},
						acessor:{
							configurable:false,
							get:function(){return this.value;},
							Set:function(v){this.value = v;}
						}
					});
					Properties.acessor.set(1);
				console.log(Properties);*/
				var _Rectangle = {};
				_Rectangle.prototype = {
					x: 0,
					y: 0,
					a: 0,
					draw: function(x,y,w,h,a,c){
						if (this.a!=a)
							this.a=a;
						App.client.visuals.rect_ext(this.x+x,this.y+y,w,h,1,this.a,0,c||"#111111");
					}
				}
				var addListener = function (obj, eventName, listener) {
					if (obj.addEventListener)
				        obj.addEventListener(eventName, listener, false);
				    else
						obj.attachEvent("on" + eventName, listener);
				}


				var sprite = Object.create(null);
				var img = Object.create(null);
				var Scripts, _Main = Object.create(null,{name:{value:"Main"}}),
				Type=Object.create(null,{prototype:{value:{value:null,writable:{value:!1},configurable:{value:!1},enumerable:{value:!1},set:function(a){this.value=a;return this}}}}),Secure=Object.create(Type.prototype),Private=Object.create(Type.prototype,{enumerable:{value:!0}}),Protected=Object.create(Type.prototype,{writable:{value:!0}}),Public=Object.create(Type.prototype,{writable:{value:!0},configurable:{value:!0},enumerable:{value:!0}}),DefaultFunction=function(){return !0;},DefaultFalse=function(){return !1;},DefaultObject = Object.create(null);







				var NullObject = Object.create(null);
				var Debug = NullObject;
				var Sprite = NullObject;
				var Sprite = NullObject;


				var TT = new Date().getTime();
				var App = Object.create({
					prototype:{
						options:{
							mute:false,
							canvas:{
								name:'canvas',
								buffername:'buffer',
								buffer:false,
								override:false,
								color:'#0000000',
								position:{
									position:'absolute',
									top:0,
									left:window.innerWidth/2,
									center:true,
									z:1
									},
								size:{
									width:320,
									height:480
									}
							},
							flags:{
								canvas:true,
								mstouch:true,
								seamless:false,
								tight:true,
								touchprevent:false,
							},
							override:{
								keyboard:true,
								mouse:true,
								MSHoldVisual:false,
								SelectStart:false
								},
							paths:{
								data:"data/",
								images:"https://ryanspice.com/images/",
								url:""
							}
						},
						user:{
							name		:"",
							id			:"",
							locale		:"",
							gender		:"",
							updated_time:"",
							timezone	:"",
							quotes		:"",
							info:Object.create({
								response:{},
								facebook:function(response){
									this.response = response;
									App.user.name = this.response.name;
									App.user.id = this.response.id;
									App.user.locale = this.response.locale;
									App.user.gender = this.response.gender;
									App.user.updated_time = this.response.updated_time;
									App.user.timezone = this.response.timezone;
									App.user.quotes = this.response.quotes;
								},
								connect:function con(appid){
									window.fbAsyncInit = function() {
									FB.init({
									appId      : appid,
									status     : true, // check login status
									cookie     : true, // enable cookies to allow the server to access the session
									xfbml      : true  // parse XFBML
									});
									FB.login(function(){
										FB.api('/me/feed', 'post', {message: 'Hello, world!'});}, {scope: 'publish_actions'});
									};

								  // Load the SDK asynchronously
								  (function(d){
								   var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
								   if (d.getElementById(id)) {return;}
								   js = d.createElement('script'); js.id = id; js.async = true;
								   js.src = "//connect.facebook.net/en_US/all.js";
								   ref.parentNode.insertBefore(js, ref);
								  }(document));

								  // Here we run a very simple Flappy of the Graph API after login is successful.
								  // This testAPI() function is only called in those cases.
								  function testAPI() {
									console.log('Welcome!  Fetching your information.... ');

									FB.api('/me', function(response) {
										App.user.info.facebook(response);
									console.log(App.user);
									  console.log('Good to see you, ' + response.name + '.');
									});
								  }
								}
							})
						},
						ext:{
							prototype:{
								freezeonfocus:false,
								fps:0,
								ping:0,
								offline:false,
								delta_speed:0,
								connectionAttempts:0,
								connectDate:new Date(),
								connectDatere:new Date(),
								scroll:{
									event:function(evt,delta) {
										if (App.client.visuals.seamless)
											evt.preventDefault();
										App.ext.input.wheelDelta = event.wheelDelta;
									},
									blockforce:false,
									to:function(force) {
										if (force)
											if (this.blockforce)
											window.scrollTo(this.x,this.y);

										//if (document.documentElement.offsetLeft!==0)
										//	window.scrollTo(0,document.documentElement.offsetTop)
										//if ((this.lock)||(force))
										//{
										//window.scrollTo(this.x,this.y);
										//if (this.y<0)
										//	this.y = 0;
										//	else
										//	if (this.y>document.documentElement.clientHeight)
										//		this.y=document.documentElement.clientHeight;
										//}
										//console.log(this.y);
									},
									lock:{x:true,y:false},
									x:0,
									y:1
								},
								click:function(event, anchorObj) {
									if (anchorObj.click) {
										anchorObj.click();
										} else if(document.createEvent) {
										if(event.target !== anchorObj) {
										var evt = document.createEvent("MouseEvents");
										evt.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
										var allowDefault = anchorObj.dispatchEvent(evt);
										// you can check allowDefault for false to see if
										// any handler called evt.preventDefault().
										// Firefox will *not* redirect to anchorObj.href
										// for you. However every other browser will.
										}
									}
								},
								top:function(){
									App.client.update.fullscale = !App.client.update.fullscale;
								},
								title:function(title){
									return document.title;//document.title==title?true:(document.title=title);
									//return document.title==title?true:(document.title=title);
								},
								debug:{
									prototype:{
										delay:{value:0},
										text:String,
										strength:"Normal",
										log:function(txt,n)	{
											this.text = txt;
											this.delay.value--;
											if ((this.delay.value==0)&&(typeof n!=="undefined"))
												this.delay.value=n;
											if ((this.delay.value==0)||(this.delay.value==1)||(typeof n ==="undefined"))
												if (this.app.debug)
													if (App.debug==true)
													//console.log("SJS:"+txt);
											return true;
										},
										toggle:function(txt) {
											if ((txt=="lite")||(txt=="Lite")||(txt==1))
												this.strength = "Lite";
											if ((txt=="off")||(txt=="none")||(txt==0))
												this.strength = "none";
											if ((txt=="normal")||(txt=="Normal")||(txt==2))
												this.strength = "Normal";
											return this.app.debug = !this.app.debug;
										}
									},
									constructor:function(a){return {
										app:{value:a},
										init:{value:function(){
													this.log('Debug:     '+this.strength);
													Debug = this;
												}
											}
										}
									}
								},
								useragent:{
									prototype:{
										agent:String,
										mouse:false,
										touch:false,
										keyboard:false,
										windows:false,
										chrome:false,
										safari:false,
										Chrome: function(){
											return this.chrome = navigator.userAgent.match(/Chrome/i) ? true : false;
										},
										Safari: function(){
											return this.safari = navigator.userAgent.match(/Safari/i) ? true : false;
										},
										Android: function(){
											return navigator.userAgent.match(/Android/i) ? true : false;
										},
										BlackBerry:function(){
											var blackberry = navigator.userAgent.match(/BlackBerry/i);
											var playbook = navigator.userAgent.match(/PlayBook/i);
											var bb10 = navigator.userAgent.match(/BB10/i);
											return blackberry||playbook||bb10 ? true : false;
										},
										iOS:function(){
											return  navigator.userAgent.match(/iPhone|iPad|iPod/i) ? true : false;
										},
										iemobile:false,
										IEMobile: function(){
											var trident = navigator.userAgent.match(/IEMobile/i);
											var windowsphone = navigator.userAgent.match(/Windows Phone/i);
											var touch = navigator.userAgent.match(/touch/i);
											return  trident || windowsphone || touch ? true : false;
										},
										ie:false,
										IE: function(){
											return  navigator.userAgent.match(/Trident/i) ? true : false;
										},
										nokia:false,
										Nokia: function(){
											return  navigator.userAgent.match(/Nokia/i) ? true : false;
										},
										any: function(){
											return (this.Android() || this.BlackBerry() || this.iOS());
										}
									},
									constructor:function(){return {
										init:{value:function(){
												this.agent = navigator.userAgent;
												this.chrome = this.Chrome();
												this.safari = this.Safari();
												this.mouse = this.any();
												this.iemobile = this.IEMobile();
												this.nokia = this.Nokia();
												this.windows = this.IEMobile() || this.IE() || !this.any();

												this.ie = this.trident = this.IE();
												this.touch = this.any();
												this.mouse = !this.any() || this.BlackBerry();
												this.keyboard = this.windows ||  this.BlackBerry() || !this.any();

												this.mobile = this.IEMobile() || this.BlackBerry() || this.iOS() || this.Android() || this.Nokia();
												console.log('UserAgent: '+this.mobile);
												}
											}
										}
									}
								},
								metatag:{
									prototype:{
										metaLink: function(href,rel,type) {
											this.link = document.createElement('link');
											this.link.href = href;
											this.link.rel = rel;
											this.link.type = type;
											return this.link;
										},
										metaTag: function(name,content) {
											this.meta = document.createElement('meta');
											this.meta.content = content;
											this.meta.name = name;
											return this.meta;
										},
										metaAppend: function(meta) {
											this.head.appendChild(meta);
											this.count++;
										},
										link:document.createElement('link'),
										meta:document.createElement('meta'),
										head:document.getElementsByTagName('head')[0],
										count:0,
										ms_taphighlight:"no",
										apple_webapp:"yes",
										apple_statusbar:"black",
										devicedpi:true,
										devicewidth:true
									},
									constructor:function(){return {
										init:{value:function(){
												this.metaAppend(this.metaTag("msapplication-tap-highlight",this.ms_taphighlight));
												this.metaAppend(this.metaTag("apple-mobile-web-app-capable",this.apple_webapp));
												this.metaAppend(this.metaTag("apple-mobile-web-app-status-bar-style",this.apple_statusbar));
												this.metaAppend(this.metaTag("cursor-event-mode","native"));
												this.metaAppend(this.metaTag("touch-event-mode","native"));
												this.metaAppend(this.metaTag("HandheldFriendly","True"));

												//if (this.devicewidth)
													this.metaAppend(this.metaTag("viewport","width=device-width, user-scalable=no"));
												//if (this.devicedpi)
													this.metaAppend(this.metaTag("viewport","target-densitydpi="+App.client.setWidth));
												Debug.log('Debug:     MetaCount/'+this.count);
											return true;
											}
										}
									}
								}
								},
								colour:{
									prototype:{
										Teal		:["#008299",	"#00A0B1"],
										Blue		:["#2672EC",	"#2E8DEF"],
										Purple		:["#8C0095",	"#A700AE"],
										DarkPurple	:["#5133AB",	"#643EBF"],
										Red			:["#AC193D",	"#BF1E4B"],
										Orange		:["#D24726",	"#DC572E"],
										Green		:["#008A00",	"#00A600"],
										SkyBlue		:["#094AB2",	"#0A5BC4"],
										White		:["#AFAFAF",	"#F9FAF2"],
										Black		:["#0F0F0F",	"#A1A1A1"],
										Current		:["#0F0F0F",	"#AFAFAF"],
										shade		:0,
										getCurrent	:function(){return this.Current},
										get			:function(){var g = (this.shade)?this.Current[0]:this.Current[1];return g;},
										getAlt		:function(){var g = (this.shade)?this.Current[1]:this.Current[0];return g;},
										set			:function(set){this.Current = set; var g = (this.shade)?this.Current[0]:this.Current[1];return this.Current;},
										setAlt		:function(set){this.shade = set;}
									},
									constructor:function(){return {
										init:{value:function(){
													this.set(this.Black);
													Debug.log("Colour:    "+this.Current[0]+"/"+this.Current[1]);
												}
											}
										}
									}
								},
								cursor:{
									prototype:{
										auto		: "auto",
										inherit		: "inherit",
										crosshair	: "crosshair",
										def			: "default",
										help		: "help",
										move		: "move",
										pointer		: "pointer",
										progress	: "progress",
										text		: "text",
										wait		: "wait",
										eresize		: "e-resize",
										neresize	: "ne-resize",
										nwresize	: "nw-resize",
										nresize		: "n-resize",
										seresize	: "se-resize",
										swresize	: "sw-resize",
										sresize		: "s-resize",
										wresize		: "w-resize",
										current 	: "auto",
										last 		: "auto",
										delay 		: 2,
										changed		:false,
										count		:0,
										lock		:0,
										set:function(cursor,lock){
											//if (this.delay>0){
											//	this.delay--;this.count=0;this.changed=false;return;}
											//	else
											//	delay =1;
											if (this.lock >0)
												this.lock--;
											if (lock)
												this.lock += 1;
											//if (this.changed==true)
											//	return;
											if	((this.last==cursor)||(this.lock))
												return;
											//console.log(this.app.client.visuals);
											this.last = this.current;
											this.current = App.canvas.getCanvas().style.cursor;
											if (this.app.options.canvas.buffer)
												this.app.canvas.getBuffer().style.cursor=cursor;
											document.body.style.cursor=cursor;
											this.changed = true;
											this.count++;
											Debug.log("Cursor:    "+this.current+" - "+this.last);
										}
									},
									constructor:function(a){return{
										app:{value:a},
										init:{value:function(){
													//this.set(this.wait);
													setTimeout(function(){App.ext.cursor.set(App.ext.cursor.def)},2000);
												}
											}
										}
									}
								},
								input:{
									prototype:{
										init:false,
										parent:Private,
										x: 0,
										y: 0,
										keyup:false,keydown:false,
										start: 		{x:0,y:0},
										control:false,
										window:{
											play:15,
											x:false,
											y:false,
											inside:false
										},
										getX:function(){return this.x;},
										getY:function(){return this.y;},
										getLastX:function(){return this.last.x;},
										getLastY:function(){return this.last.y;},
										getStartX:function(){return this.start.x;},
										getStartY:function(){return this.start.y;},
										getDuration:function(){return this.duration;},
										getPressed:function(){return this.pressed;},
										getReleased:function(){return this.released;},
										listener:{
											down:function(mouse,input) {
												if (input.delay>0)
													return;
												input.start.x = mouse.x || input.x;
												input.start.y = mouse.y || input.y;
												input.pressed = true;
												input.press = true;
												//if ((input.pressed)||(input.delay))
												//	return;
												//input.pressed = true;
												//input.press = true;
												//
												//
												//
												//
												//
												//
												input.dist.x = 0;
												input.dist.y = 0;
											},
											move:function(move,touch,input){
												if (input.delay>0)
													return;
												//if ((input.delay))
												//	return;
												input.x = move.x || input.x;
												input.y = move.y || input.y;
												input.dist.x = (input.x-input.start.x)/App.client.scale;
												input.dist.y = (input.y-input.start.y)/App.client.scale;
												//((!touch) ? input.mouse_distance : input.touch_distance)(touch);
											},
											up:function(mouse,input) {
												input.end.x = mouse.x || input.x;
												input.end.y = mouse.y || input.y;
												input.pressed = false;
												input.released = true;

												input.dist.x = input.end.x-input.start.x;
												input.dist.y = input.end.y-input.start.y;
											},
											touch:function(touch,input){
												if (input.delay>0)
													return;
												input.x = touch.pageX;
												input.y = touch.pageY;
												input.pos.x = touch.pageX;
												input.pos.y = touch.pageY;
												input.start.x = touch.pageX;
												input.start.y = touch.pageY;
												input.released = false;
												input.duration = 0;
												//input.dist.x = 0;
												//input.dist.y = 0;
											},
											keydown:function(a,input) {
												if (input.delay>0)
													return;
												input.key = true;
												input.kpressed = true;
												input.keyPower = -a;
												input.keyPower 	= input.keyPower;
												Debug.log(input.key + " " + input.keyPower);
											},
											keyup:function(input) {
												input.key = false;
												input.keyPower = 0;
												input.kreleased = true;
												input.kpressed = false;
											}
											,
											ups:function(a,input){
												a==1?input.keyup=true:input.keyup=false;

											},
											downs:function(a,input){
												if (input.delay>0)
													return;
												a==1?input.keydown=true:input.keydown=false;
											}
										},
										pressed: 	false,
										released: false,
										press: 		false,
										delta: 0,
										wheelDelta: 0,
										duration: 0,
										dist: {x:0,y:0},
										pos: {x:0,y:0},

										last: {x:0,y:0},
										end: {x:0,y:0},
										delay:0,
										key:false,
										keyPower:0,
										menu:false,
										drag:false,
										confine:false,
										position:function(canvas,evt) {
											if ((!canvas)||(!evt))
													return false;
											return {x: evt.clientX,y: evt.clientY};
										},
										mouse:function() {
											if (!App.ext.input.pressed)
												App.ext.input.dist =  App.client.Math.Vector.Difference(App.ext.input,App.ext.input.start);
										},
										mouse_distance:function() {
											if (!App.ext.input.pressed)
												App.ext.input.dist =  App.client.Math.Vector.Difference(App.ext.input.start,App.ext.input.end);
										},
										touch_distance:function(touch) {
											if (!touch)
												return;
											App.ext.input.x = touch.pageX;
											App.ext.input.y = touch.pageY;
											//if (!App.ext.input.input.pressed)
												App.ext.input.dist =  App.client.Math.Vector.Difference(App.ext.input.start,App.ext.input.end);
										},
										get_angle: function(){
											return 57.2957795 * Math.atan2(this.end.y-this.start.y,this.end.x-this.start.x);
										},
										get_delta: function(){
											return this.dist.x*this.dist.x+this.dist.y*this.dist.y;
										},
										set: function(x,y){
											this.x=x;this.y=y;
										},
										update:function UPDATE() {
											this.last.x = this.x;
											this.last.y = this.y;
											this.press = false;
											this.window.inside = 0;
											this.wheelDelta = 0;
											this.pressed?this.duration++:this.duration=0;

											this.confine?(
												((this.y<this.app.client.visuals.fixY(0))?
													(this.window.y=0,this.window.inside -= 1):
														((this.y>this.app.client.visuals.fixY(this.app.client.setHeight))?
															(this.window.y=this.app.client.visuals.fixW(this.app.client.setHeight),this.window.inside += 1):
															(this.window.y=-this.app.client.visuals.fixY(0)+this.y)
														),
														((this.x<this.app.client.visuals.fixX(0))?
															(this.window.x = 0,this.window.inside -=1):
															((this.x>this.app.client.visuals.fixX(this.app.client.setWidth))?
																(this.window.x = this.app.client.visuals.fixW(this.app.client.setWidth),this.window.inside += 1):
																(this.window.x = -this.app.client.visuals.fixX(0)+this.x)
															)
														)
													)
												):((this.y<this.app.client.visuals.fixY(0))?
														(this.window.y=-this.app.client.visuals.fixY(0)+this.y):
														((this.y>this.app.client.visuals.fixY(this.app.client.setHeight))?
															(this.window.y=-this.app.client.visuals.fixY(0)+this.y):
															(this.window.y=-this.app.client.visuals.fixY(0)+this.y)
													),
													((this.x<this.app.client.visuals.fixX(0))?
														(this.window.x=-this.app.client.visuals.fixX(0)+this.x):
														((this.x>this.app.client.visuals.fixX(this.app.client.setWidth))?
															(this.window.x=-this.app.client.visuals.fixX(0)+this.x):
															(this.window.x=-this.app.client.visuals.fixX(0)+this.x)
														)
													));
											this.released?(this.released=false,this.dist.x=0,this.dist.y=0):null;
											this.codereleased = 0;
											//this.duration>0?(this.released=false);
											//(this.released==true)?(this.released=false,this.duration=0,this.dist.x=0,this.dist.y=0):null;
											(this.delay>0)?this.delay-=0.1:null;
										return true;
										},
									},
									constructor:function(a){return{
										app:{value:a},
										codes:{value:new Array()},
										init:{value:function Initalize(a){
											this.codes[0]  = '';
											this.codes[1]  = '';
											this.codes[2]  = '';
											this.codes[3]  = '';
											this.codes[4]  = '';
											this.codes[5]  = '';
											this.codes[6]  = '';
											this.codes[7]  = '';
											this.codes[8]  ='backspace';
											this.codes[9]  ='tab'                ;
											this.codes[13] ='enter'             ;
											this.codes[16] ='shift'             ;
											this.codes[17] ='ctrl'              ;
											this.codes[18] ='alt'               ;
											this.codes[19] ='pause/break'       ;
											this.codes[20] ='capslock'          ;
											this.codes[27] ='escape'            ;
											this.codes[32] ='space'            ;
											this.codes[33] ='pageup'            ;
											this.codes[34] ='pagedown'          ;
											this.codes[35] ='end'               ;
											this.codes[36] ='home'              ;
											this.codes[37] ='leftarrow'         ;
											this.codes[38] ='uparrow'           ;
											this.codes[39] ='rightarrow'        ;
											this.codes[40] ='downarrow'         ;
											this.codes[45] ='insert'            ;
											this.codes[46] ='delete'            ;
											this.codes[48] ='0'                 ;
											this.codes[49] ='1'                 ;
											this.codes[50] ='2'                 ;
											this.codes[51] ='3'                 ;
											this.codes[52] ='4'                 ;
											this.codes[53] ='5'                 ;
											this.codes[54] ='6'                 ;
											this.codes[55] ='7'                 ;
											this.codes[56] ='8'                 ;
											this.codes[57] ='9'                 ;
											this.codes[65] ='a'                 ;
											this.codes[66] ='b'                 ;
											this.codes[67] ='c'                 ;
											this.codes[68] ='d'                 ;
											this.codes[69] ='e'                 ;
											this.codes[70] ='f'                 ;
											this.codes[71] ='g'                 ;
											this.codes[72] ='h'                 ;
											this.codes[73] ='i'                 ;
											this.codes[74] ='j'                 ;
											this.codes[75] ='k'                 ;
											this.codes[76] ='l'                 ;
											this.codes[77] ='m'                 ;
											this.codes[78] ='n'                 ;
											this.codes[79] ='o'                 ;
											this.codes[80] ='p'                 ;
											this.codes[81] ='q'                 ;
											this.codes[82] ='r'                 ;
											this.codes[83] ='s'                 ;
											this.codes[84] ='t'                 ;
											this.codes[85] ='u'                 ;
											this.codes[86] ='v'                 ;
											this.codes[87] ='w'                 ;
											this.codes[88] ='x'                 ;
											this.codes[89] ='y'                 ;
											this.codes[90] ='z'                 ;
											this.codes[91] ='leftwindowkey'     ;
											this.codes[92] ='rightwindowkey'    ;
											this.codes[93] ='selectkey'         ;
											this.codes[96] ='numpad0'           ;
											this.codes[97] ='numpad1'           ;
											this.codes[98] ='numpad2'           ;
											this.codes[99] ='numpad3'           ;
											this.codes[100]='numpad4'          ;
											this.codes[101]='numpad5'          ;
											this.codes[102]='numpad6'          ;
											this.codes[103]='numpad7'          ;
											this.codes[104]='numpad8'          ;
											this.codes[105]='numpad9'          ;
											this.codes[106]='multiply'         ;
											this.codes[107]='add'              ;
											this.codes[109]='subtract'         ;
											this.codes[110]='decimalpoint'     ;
											this.codes[111]='divide'           ;
											this.codes[112]='f1'               ;
											this.codes[113]='f2'               ;
											this.codes[114]='f3'               ;
											this.codes[115]='f4'               ;
											this.codes[116]='f5'               ;
											this.codes[117]='f6'               ;
											this.codes[118]='f7'               ;
											this.codes[119]='f8'               ;
											this.codes[120]='f9'               ;
											this.codes[121]='f10'              ;
											this.codes[122]='f11'              ;
											this.codes[123]='f12'              ;
											this.codes[144]='numlock'          ;
											this.codes[145]='scrolllock'       ;

											//"Nintendo Wii"
											this.codes[175]='Up (Wii?)';	//(CAUTION! ALSO SCROLLS UP)
											this.codes[176]='Down (Wii?)';	//(CAUTION! ALSO SCROLLS UP)
											this.codes[177]='Left (Wii?)';	//(CAUTION! ALSO SCROLLS UP)
											this.codes[178]='Right (Wii?)';	//(CAUTION! ALSO SCROLLS UP)

											this.codes[170]='- (Wii?)';		//(CAUTION! ALSO ZOOMS OUT)
											this.codes[174]='+ (Wii?)';		//(CAUTION! ALSO ZOOMS IN)
											this.codes[172]='1 (Wii?)';		//
											this.codes[173]='2 (Wii?)';		//(CAUTION! ALSO SPLITS SCREEN INTO SINGLE COLUMN MODE)


											/*
											PS3:
											Platform: "PLAYSTATION 3"
											Up: 38
											Down: 40
											Left: 37
											Right: 39
											X: 63 (CAUTION! ALSO CLICKS)
											Nintendo 3ds:
											Platform: "Nintendo 3ds"
											Up: 38
											Down: 40
											Left: 37
											Right: 39
											LG Smart TV:
											Platform: "Linux 35230"
											0-9: 48-57
											Play: 445
											Pause: 19
											Rewind: 412
											FF: 417
											*/


											this.codes[186]='semi-colon';
											this.codes[187]='equalsign';
											this.codes[188]='comma';
											this.codes[189]='dash';
											this.codes[190]='period';
											this.codes[191]='forwardslash';
											this.codes[192]='graveaccent';
											this.codes[219]='openbracket';
											this.codes[220]='backslash';
											this.codes[221]='closebraket';
											this.codes[222]='singlequote';


											if (!this.app.options.override.SelectStart)
												this.app.canvas.canvas.addEventListener("selectstart", function(e) { e.preventDefault(); }, false);
											if (!App.options.override.MSHoldVisual)
												this.app.canvas.canvas.addEventListener("MSHoldVisual", function(e) { e.preventDefault(); }, false);
											var body = document.body;
											if (!App.options.flags.mstouch)
												body.setAttribute("style","-ms-touch-action: none; ms-content-zooming: none; touch-action: none; -ms-overflow-style: none;");
											if (App.options.flags.seamless)
												body.style.overflow = "hidden";
											if (App.options.flags.tight)
												body.style.padding = "0px", body.style.margin = "0px auto";





											if (!this.menu) {
													document.oncontextmenu = function(evt) {evt.preventDefault(); return false; };
													window.oncontextmenu = function(evt) {evt.preventDefault(); return false; };
												}
											if (!this.drag) {
													document.ondragstart   = function(evt) {evt.preventDefault(); return false; };
													window.ondragstart   = function(evt) {evt.preventDefault(); return false; };
												}

											//if ((App.ext.useragent.keyboard)||(App.options.override.keyboard)) {
													window.addEventListener('keydown', 	function(event) {
														App.ext.input.codedown = App.ext.input.codes[event.keyCode];
														if (event.ctrlKey)
															App.ext.input.control = true;

															switch(event.keyCode)
															{
															case 37:App.ext.input.listener.keydown(-1,App.ext.input);break;
															case 65:App.ext.input.listener.keydown(-1,App.ext.input);break;
															case 39:App.ext.input.listener.keydown(1,App.ext.input);break;
															case 68:App.ext.input.listener.keydown(1,App.ext.input);break;
															case 40:App.ext.input.listener.downs(1,App.ext.input);break;
															case 83:App.ext.input.listener.downs(1,App.ext.input);break;
															case 38:App.ext.input.listener.ups(1,App.ext.input);break;
															case 87:App.ext.input.listener.ups(1,App.ext.input);break;
															}
													},true);

													window.addEventListener('keyup', 	function(event) {
														App.ext.input.codeup = App.ext.input.codes[event.keyCode];
														if (event.ctrlKey)
															App.ext.input.control = false;
															switch(event.keyCode)
															{
															case 37:App.ext.input.listener.keyup(App.ext.input);break;
															case 65:App.ext.input.listener.keyup(App.ext.input);break;
															case 39:App.ext.input.listener.keyup(App.ext.input);break;
															case 68:App.ext.input.listener.keyup(App.ext.input);break;
															case 40:App.ext.input.listener.downs(2,App.ext.input);break;
															case 83:App.ext.input.listener.downs(2,App.ext.input);break;
															case 38:App.ext.input.listener.ups(2,App.ext.input);break;
															case 87:App.ext.input.listener.ups(2,App.ext.input);break;
															}
														App.ext.input.codereleased = true;
													},true);
												//}
											window.addEventListener('mousewheel',App.ext.scroll.event,true);
											//if (App.ext.useragent.mouse) {
												window.addEventListener('mousedown',function(evt) {
														App.ext.input.listener.down(App.ext.input.position(App.canvas.getCanvas(), evt),App.ext.input);
													},true);
												window.addEventListener('mousemove',function(evt) {
														App.ext.input.listener.move(App.ext.input.position(App.canvas.getCanvas(), evt),null,App.ext.input);
													},true);
												window.addEventListener('mouseup',function(evt) {
														App.ext.input.listener.up(App.ext.input.position(App.canvas.getCanvas(), evt),App.ext.input);
													},true);
												//}
											//if (!App.ext.useragent.touch) {
												window.addEventListener('touchstart',	function(evt) {
														if (App.options.flags.touchprevent)
														evt.preventDefault();
														App.ext.input.listener.touch(evt.targetTouches[0],App.ext.input);
													},true);
												window.addEventListener('touchend',		function(evt) {
														if (App.options.flags.touchprevent)
														evt.preventDefault();
														App.ext.input.listener.up(evt,App.ext.input);
													},true);
												window.addEventListener('touchmove',	function(evt) {
														if (App.options.flags.touchprevent)
														evt.preventDefault();
														App.ext.input.listener.move(App.ext.input.position(App.canvas.getCanvas(), evt), evt.targetTouches[0],App.ext.input);
													},true);
											//	}
											//if (App.ext.useragent.windows) {
												window.addEventListener('MSPointerDown',function(evt) {
														App.ext.input.listener.down(App.ext.input.position(App.client.c, evt),App.ext.input);
													},true);
												window.addEventListener('MSPointerMove',function(evt) {
														App.ext.input.listener.move(App.ext.input.position(App.client.c, evt),null,App.ext.input);
													},true);
												window.addEventListener('MSPointerUp',	function(evt) {
														App.ext.input.listener.up(App.ext.input.position(App.client.c, evt),App.ext.input);
													},true);
												//}
											}
										}
									}
								}
								},
								con:false,
								connection:null,
								connect:function(app){
								return;
									if ((this.offline)||(this.connectionAttempts>0))
										return this.offline = this.con;
									this.connectionAttempts++;
									Debug.log("Network:   Attempt: "+this.connectionAttempts);
									if (window.XMLHttpRequest)
										this.connection = new XMLHttpRequest();
										else
										this.connection = new ActiveXObject("Microsoft.XMLHTTP");
									this.connection.onreadystatechange = function()
										{
										if (this.connection.readyState==4 && connection.status==200)
											{
											this.offline = this.con = false;
											this.connectDatere = new Date;
											this.connectDatere = this.connectDatere.getTime();
											this.ping = this.connectDatere - this.connectDate;
											}
											else
											{
											this.offline = this.con = true;
											this.ping = 1;
											}
										}
										try {
											this.connection.open("GET","http://www.google.com",true);
											this.connection.send();
											}
									catch(e){Debug.log('No0ernet');}
									return this.offline = this.con;
								}
							},
							constructor:function(a){return{
								app:{value:a},
								init:{value:function(name){
										this.title(name);
										(this.debug = this.app.Construct(this.debug.prototype,this.debug.constructor)).init();
										(this.cursor = this.app.Construct(this.cursor.prototype,this.cursor.constructor)).init();
										(this.useragent = this.app.Construct(this.useragent.prototype,this.useragent.constructor)).init();
										(this.input = this.app.Construct(this.input.prototype,this.input.constructor)).init();
										(this.colour =	this.app.Construct(this.colour.prototype,this.colour.constructor)).init();
										(this.metatag =	this.app.Construct(this.metatag.prototype,this.metatag.constructor)).init();
										}
									}
								}
							}
						},
						canvas:{
							prototype:{
								head:document.getElementsByTagName('head')[0],
								rendering_style:document.createElement('style'),
								canvas:NullObject,
								buffer:NullObject,
								canvasList:document.getElementsByTagName('canvas'),
								getCanvas:function(){return this.canvas;},
								getBuffer:function(){return this.buffer;},
								setCanvas:function(c){this.canvas = c;},
								setBuffer:function(b){this.buffer = b;},
								createCanvas:function(){
									var c = document.createElement("canvas");
										c.id = this.app.options.canvas.name;
										document.body.appendChild(c);
									return document.getElementById(this.app.options.canvas.name);
								},
								createBuffer:function(){
									var c = document.createElement("canvas");
										c.id = this.app.options.canvas.buffername;
										document.body.appendChild(c);
									return document.getElementById(this.app.options.canvas.buffername);
								},
								styleCanvas:function(){
									this.getCanvas().style.position = this.app.options.canvas.position.position;
									this.getCanvas().style.zIndex = this.app.options.canvas.position.z;
									if (this.app.options.canvas.buffer)
									{
										this.getBuffer().style.position = this.app.options.canvas.position.position;
										this.getBuffer().style.zIndex = this.app.options.canvas.position.z-1;
									}
									if (this.app.options.canvas.override)
									{
										this.getCanvas().style.left = this.app.options.canvas.position.left+"px";
										this.getCanvas().style.top = this.app.options.canvas.position.top+"px";
										if (this.app.options.canvas.buffer)
										{
											this.getBuffer().style.left = this.app.options.canvas.position.left+"px";
											this.getBuffer().style.top = this.app.options.canvas.position.top+"px";
										}
									}
								},
								background_set:function(value) {
									if (App.options.canvas.buffer)
									this.buffer.style.background = value;
									this.canvas.style.background = value;
								},
								background_get:function() {
									return this.buffer.style.background;
								},
							},
							constructor:function(app){return{
								app:{value:app},
								init:{writable: false,  configurable:false, enumerable:false, value:function(){
										var getcanvas = document.getElementById(app.options.canvas.name);
										if (getcanvas)
											{
											this.setCanvas(getcanvas);
											if (app.options.canvas.buffer)
												{
												var getbuffer = document.getElementById(app.options.canvas.buffername);
												if (getbuffer)
													this.setBuffer(getbuffer);
													else
													{
													this.createBuffer();
													}
												}
											}
											else
											{
											this.setCanvas(this.createCanvas());
											if (app.options.canvas.buffer)
												this.setBuffer(this.createBuffer());
											}
										this.styleCanvas();
										this.rendering_style.innerHTML = this.rendering_style.innerText = '@-ms-viewport {width:100%;height:100%;} #Client, #Buffer, img[srcApp=".gif"],img[srcApp=".jpg"], img[srcApp=".png"] {image-rendering: -moz-crisp-edges;image-rendering:-o-crisp-edges;image-rendering: crisp-edges;image-rendering: -webkit-optimize-contrast;-ms-interpolation-mode: nearest-neighbor;}';
										this.head.appendChild(this.rendering_style);
										}
									}
								}
							}
						},
						client:{
							prototype:{
								start:function(loop,scale){
									this.scale = scale;
									this.client_f = loop;
									requestAnimationFrame(this.client_f);
								},
								loop:function(a){
									this.mute = this.audio.update();
									this.scale = this.update.scale(this);
									this.fps = this.update.step.tick(this.second,this.mainLoop,a);
									App.ext.cursor.set("auto");
									this.resized = this.update.size(this);
									this.visuals.draw(this.scale);
									a.ext.input.update();
									requestAnimationFrame(this.client_f);
								},
								update:{
									last:{w:0,h:0},
									difference:{x:0,y:0},
									scaler:{s:1,x:1,y:1},
									scaling:true,
									scalediff:0,
									lastscale:1,
									fullscale:false,
									resized:false,
									set:0,
									frames:0,
									size:function(app){
										this.difference = app.Math.Vector.Difference(new app.Math.Vec(this.last.w,this.last.h),new app.Math.Vec(app.width,app.height));
										if ((this.difference.x + this.difference.y==0))
											return false;
										App.canvas.getCanvas().width  = this.last.w = app.width;
										App.canvas.getCanvas().height = this.last.h = app.height;
										App.canvas.getBuffer().width  = this.last.w = app.width;
										App.canvas.getBuffer().height = this.last.h = app.height;
										return true;
										},
									scale:function(app) {
										if (this==window)
											return console.log('Warning: Scale: [this === window]');
											else
										if ((this.pause>0.5))
											return console.log('Warning: Paused',30);
											else
										if (this.set==1)
											return console.log('Warning: Scale: Duplicate Run',30);

										if (App.options.canvas.override)
										{
											if (App.options.canvas.size.width!==app.width)
												app.width = App.options.canvas.size.width;
											if (App.options.canvas.size.height!==app.height)
												app.height = App.options.canvas.size.height;

											if (App.options.canvas.position.center)
												{
												if (App.options.canvas.size.left!==app.width/2)
													{
													App.canvas.getCanvas().style.left  = -app.width/2 + window.innerWidth/2+"px";
												if (App.options.canvas.buffer)
													App.canvas.getBuffer().style.left  = -app.width/2 + window.innerWidth/2+"px";
													}
												}
										}
										else
										{

										if (window.innerHeight!==app.height)
											app.height = window.innerHeight;
										if (window.innerWidth!==app.width)
											app.width = window.innerWidth,console.log('');
										}



										this.set = 1;
										this.scaler.x = app.height/app.setHeight;
										this.scaler.y = app.width/app.setWidth;
										(this.fullscale)?this.scaler.s = this.scaler.x:this.scaler.s = (this.scaler.x<this.scaler.y)?this.scaler.x:this.scaler.y;
										if (isNaN(this.scaler.s)){this.set = 0;return;}
										this.scalediff = this.scaler.s-this.lastscale;



										(this.scalediff)?App.ext.scroll.to(true):App.ext.scroll.to(false);
										this.set = 0;
										this.lastscale = this.scaler.s;
										return this.scaler.s;
									},
									state:{
										prototype:{
											init:function(){
												if (typeof this.current.init !=='undefined')
												this.current.init();
											},
											draw:function(){
												if (typeof this.current.draw !=='undefined')
												this.current.draw();
											},
											update:function(){
												if (typeof this.current.update !=='undefined')
												this.current.update();
											},
											set:function(state,start){
												App.ext.input.delay = 1;
												if ((this.name=state.name)&&(this.initalized=!0)) {
													if (!state.started)
														this.current=Object.create(state,App.client._Room);
												if (start)
													this.current.init(),this.current.started = true;
												};
											},
											name:"",
											current:{},
											initalized:false
										},
										constructor:function(app){
											return	{
												app:{value:app},
												init:{value:function(state){
														this.set(state,true);
														this.initalized = true;
													}
												}
											}
										}
									},
									step:{
										first:function(step,app){

											if ((typeof step == 'undefined')||(!step.Step(app)))
												return;
											this.fps = 1 * (this.clean()/step.delta * 1E3);
											this.delta = step.targetfps / this.fps;
											this.delta = Math.ceil(this.delta*100000)/100000;
											if ((this.delta>2.5))
												this.delta = 2.5;

											if (this.delta!==this.delta+1)
												App.delta = App.client.delta = this.delta_speed = this.delta;
												else
												App.delta = App.client.delta = this.delta_speed = 1;
												//console.log(this.delta);
											/* Increment Time to increase performance */
												if (this.fps==0)
													return;
												this.increment = -step.targetfps+ (step.targetfps*(step.targetfps / this.fps));
												this.adding+=this.increment;
												if (this.adding>step.targetfps)
													this.adding-=(this.adding/step.targetfps)*step.targetfps,this.addings+=1;
											return;
										},
										focus:function(){
											if (App.ext.freezeonfocus)
												return document.hasFocus();
											return true;
										},
										second:function(step,app){
											if ((typeof step == 'undefined')||(!step.Step(app)))
												return false;
											this.frames++;
											for(var s =this.addings;s>=0;--s)
												if (app.client.update.state.initalized)
													(this.focus())?app.client.update.state.current.update():null;
											this.addings = 0;
										},
										tick:function(a,b,app){
											this.first(a,app);
											this.second(b,app); /* Game Loop, Increment Frames */
											return this.fps;
										},
										clean:function(){
											var f = this.frames;
											this.frames = 0;	/* Reset Frames, Return Frames ( Pass F*/
											return f;
										},
										delta_speed:1,
										increment:0,
										addings:0,
										adding:0,
										delta:1,
										frames:0,
										fps:1
									}
								},
								Math:{
									Vec: function(x,y){
										this.x = x;
										this.y = y;
									},
									Clamp:function(x,min,max){
										return x < min ? min : (x > max ? max : x);
									},
									Wrap:function(x,min,max){
										return x < min ? max : (x > max ? min : x);
									},
									Difference:function(a,b){
										return a-b;
									},
									Pythageon:function(a,b){
										return Math.sqrt((a*a) + (b*b));
									},
									Vector:{
										x:0,y:0,
										Difference:function(a,b){
											return {x:a.x-b.x,y:a.y-b.y};
										},
										Sum:function(a,b){
											return {x:a.x+b.x,y:a.y+b.y};
										}
									},
									Data:{
										Total:function(){
										return this.total = this.kilobyteCount(App);
										},
										Update:function(){
										if (App.client.update.state.initalized)
											return this.update = this.byteCount(App.client.update.state.current.update);
											else
											return this.update = this.byteCount(Object.create(null,App.client._Room));
										},
										isFunction:function(functionToCheck) {
											 var getType = {};
											 return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
										},
										byteCount:function (object) {
											if (this.isFunction(object))
												return this.byteCountF(object.toString().length*2);
											this.objectList = [];
											this.stack = [ object ];
											this.bytes = 0;
											while ( this.stack.length ) {
												this.value = this.stack.pop();
												if ( typeof this.value === 'trueean' ) {
													this.bytes += 4;
												}
												else if ( typeof this.value === 'string' ) {
													this.bytes += this.value.length * 2;
												}
												else if ( typeof this.value === 'number' ) {
													this.bytes += 8;
												}
												else if	(typeof this.value === 'object' && this.objectList.indexOf( this.value ) === -1) {
													this.objectList.push( this.value );
													for( i in this.value ) {
														if ((this.value[i]==object)||(this.value[i]==window)){
															if ((this.selfCount>0)||(this.value[i]==window))
																{
																	this.selfCount = 0;
																	break;
																}
															this.selfCount++;
														}
														this.stack.push( this.value[ i ] );
													}
												}
											}
											return this.bytes;
										},
										byteCountF:function(s){
											return encodeURI(s).split(/%..|./).length - 1;
										},
										kilobyteCount:function(object){
											return  Math.round((this.byteCount(object)*this.KB)*100)/100;
										},
										kb:0.0078125,
										KB:0.0009765625,
										objectList:[{}],
										selfCount:0,
										update:0,
										stack:[{}],
										value:{},
										bytes:0,
										total:0,
									}
								},
							Particles:{
								p:0,
								draw:function(l){

									for (this.p=_Rain.size-1; this.p;--this.p)
										if (_RainParticles[this.p].y>App.client.visuals.fixY(0))
										if (_RainParticles[this.p].y<App.client.visuals.fixY(App.client.setHeight))
										_RainParticles[this.p].draw(App.client.visuals,l);
								},
								update:function(){
									for (var _R=0; _R<_Rain.size;++_R)
										_RainParticles[_R].update();
								}
							},
							_Room:{
									prototype:{
									init:DefaultObject,
									app:DefaultObject,
									visuals:DefaultObject,
									graphics:DefaultObject,
									started:false,
									Started:{value:function(){return function() {var a = this.Started;App.set_scale();this.Started = true; return a};}}
									},
									constructor:function(){return {
										init:{value:function(){
												return {
												app : {value:App},
												visuals :   {value:App.client.visuals},
												graphics :  {value:App.client.graphics}
												};
											}}
										}
									}
								},
							_Pace:{
								prototype:{
								timer:	0,
								rate:	0,
								offset:	0,
								delta:	1,
								Time:	function(app)
									{
										this.timer = new Date().getTime();
										return this.timer - this.offset;
									},
								Step:	function(app)
									{
										this.delta = this.Time(app);
										var step = this.rate*this.delta;
										if (step>1.0)
											this.offset+=Math.floor(step)/this.rate;
										return (step - 1.0)>0.0?true:false;
									},
								GetStepsPerSecond:	function()
									{
										return 1000.0/this.delta;
									}
								},
								constructor:function(){return {
									init:{value:function(rate,fps){
											Debug.log('Pace: Init');
											this.targetfps = fps;
											this.timer = new Date().getTime();
											this.rate = rate/1000.0;
											this.offset = this.timer-1000.0/rate;
											this.delta = 0.0;
											return true;
										}}
									}
								}
							},
							audio:{
								prototype:{
									mute:false,
									quality:0,
									current:0,
									audio: new Audio(),
									sound: new Array(new Audio()),
									length: new Array(),
									soundbyte:function(filename,callback){
										this.fname = new Audio(filename);
										this.play = function play() {
											this.fname.pause();
											this.fname.play();
										}
									},
									MultiChannelSound:function(filename,channelQ,callback){
										if (App.ext.useragent.ie)
											return;
										this.fname = filename;
										this.channel = new Array();
										for (var i = 0; i != channelQ; ++i)
										{
											this.channel[i] = new Audio(filename);
										}
										this.currentChannel = 0;
										this.play = function play()
										{
											try{
											this.channel[this.currentChannel].currentTime = 0;
											this.channel[this.currentChannel].play();
											++this.currentChannel;
											if (this.currentChannel == this.channel.length)
											{
												this.currentChannel = 0;
											}
											}catch(e){}
										}
										this.stop = function stop()
										{
											this.channel[this.currentChannel].pause();
											++this.currentChannel;
											if (this.currentChannel == this.channel.length)
											{
												this.currentChannel = 0;
											}
										}
									},
									toggle:function() {
										//(this.mute)?this.sound[this.current].play():this.sound.[this.current].pause();
										return this.mute = !this.mute;
									},
									set:function(index,reset){
										this.sound[this.current].pause()
										this.sound[this.current] = index;
										try{
											this.sound[this.current].currentTime = 0;
											}catch(e){}
										return;for(var i=0;i>0;--i)
										if (App.ext.useragent.mobile){
											index.play();
											return;
										}
										else
										{
										index.play();
											return;
										}
										if (!this.mute)
											{
											this.sound[this.current].pause();
											this.current = index;
											try{
											index.currentTime = 0;
											}catch(e){}
											index.play();
											}
									},
									update:function() {

										return;
										if (typeof this.sound === 'object')
											if (this.sound[this.current])
											if (this.sound[this.current].paused)
											if (this.sound[this.current].play)
												this.sound[this.current].play();
										return;
										if (this.sound[this.current]==="undefined")
											return;
										if (this.sound[this.current].currentTime >= this.length)
										{
											if (++this.current == soundtrackQ)
											{
												this.current = 0;
											}

											this.sound[this.current].currentTime = 0;
											this.sound[this.current].play();
										}
									}
								},
								constructor:function(){return {
									init:{value:function(){
											Debug.log('Audio: Init');
											return true;
										}}
									}
								}
							},
							_Animation:function(aniArray,aniSpeed,ani,origAni){
								///Animation States
								///  -2 = set to idle.
								/// -1 = animate backwards and stop.
								///  0 = set to first frame.
								///  1 = animate forwards and stop.
								///  2 = animate forwards and return to 0 and animate again.

								this.aniImage = new Array();
								this.aniImage = aniArray;
								this.nextAni = new Array();
								this.nextAni = origAni;

								if (this.aniImage[0])
									this.aniMax = this.aniImage.length-1;
									else
									this.aniMax = 0;
								this.aniCurrent = 0;
								this.aniSpeed = aniSpeed*App.delta_speed;
								this.animate = ani;
								this.aniChanged = 0;
								this.aniPrev = aniArray;
								this.aniDir = 1;
								this.recreate = function recreate(aniArray,aniSpeed,ani)
								{
									this.aniCurrent = 0;
									this.aniImage = aniArray;
									this.aniSpeed = aniSpeed;
									this.animate = ani;
									this.aniDir = 1;
								}
								this.update = function update()
								{
									if (!this.aniImage==this.aniPrev)
										this.aniPrev = this.aniImage,this.changed();
									if (this.animate==-2)
									{
										//this.aniImage = snowboarding_loading.player_idle;
										if (this.aniCurrent>=this.aniMax)
											this.aniDir = -1;
										if (this.aniCurrent<=0)
											this.aniDir = 1;
										if (this.aniCurrent<=this.aniMax)
											this.aniCurrent+=this.aniSpeed * this.aniDir;

									}
									if (this.animate==-1)
									{
										if (this.aniCurrent>0)
											this.aniCurrent-=this.aniSpeed;
									}
									if (this.animate==0)
									{
										this.aniCurrent = 0;
									}
									if (this.animate==1)
									{
										if (this.aniCurrent<this.aniMax)
											this.aniCurrent+=this.aniSpeed;
										if (this.aniCurrent>this.aniMax)
											this.aniCurrent = this.aniMax;
									}
									if (this.animate==2)
									{
										this.aniCurrent+=this.aniSpeed;
										if (this.aniCurrent>=this.aniMax)
											this.aniCurrent=0;
									}
								}
								this.changed = function changed()
								{
									this.recreate(this.nextAni,this.aniSpeed,0);
								}
								this.reverse = function reverse()
								{
									if (this.animate==1)
										this.animate=-1;
										else
										this.animate=1;
								}
								this.get_img = function get_img()
								{
									if ( this.aniImage[Math.round(this.aniCurrent)])
										return this.aniImage[Math.round(this.aniCurrent)];
										else
										return this.aniImage;
								}
							},
							graphics:{
								prototype:{
									path:"",
									SpriteWebItems:new Array(0),
									SpriteLoadNumber:0,
									SpriteLoadErrors:0,
									SpriteLoadTime:0,
									Sources:{},
									load:function(name,file){
										if (typeof file==="undefined")
											file = name;
										this.Sources.append(this.SpriteAppend(name,file));
										return this.Sources.getByName(name);
									},
									SpriteCreate:function(file,src,name){
										this.SpriteLoadNumber++;
										this.SpriteLoadTime += (10*App.delta_speed)*this.SpriteLoadNumber;
										return sprite = Object.create(Sprite,{file:{value:file},src:{value:src},name:{value:name}});
									},
									SpriteAppend:function(name,file){
										return (img = this.SpriteCreate(file,this.path + file + ".png",name)).get();
									},
									SpriteUnload:function(name,file){
										delete this.Sources.getByName(name);
										//return this.SpriteLoad(name,file);
									},
									webLoad:function(name,address){
										this.SpriteWebItems[name] = new Image();
										this.SpriteWebItems[name].src = address;
										return this.SpriteWebItems[name];
									},
									graphicsLibrary:function(){
										Sprite = Object.create(null);
										this.Sources = Object.create(null);
										this.Sources.prototype = {
											get:function get(){return this.index;},
											getByName:function getByName(name){return this.index[name];},
											getName:function getName(name){return this.index[name].name;},
										}
										Sprite = Object.create(this.Base,
										{
											constructor:function Sprite(path,filename){this.path=path;this.filename=filename;return path;},
											src:	{value:"S:undefined"},
											file:	{value:"S:undefined"},
											name:	{value:"S:undefined"}
										});
										this.Sources = Object.create(this.Sources.prototype,
										{
											count:{writable: true,  configurable:true,value:0},
											index:{value:new Array()},
											append:{value:function append(image)
											{
												if (this.index[image.name]==image)
													return;
												this.index[image.name]=image;
												this.count++;
												Debug.log("GraphicsController: load: "+image.name + ":"+this.count);
											}},
											unload:{value:function unload(name)
											{
												this.index[name]=null;
												Debug.log('GraphicsController: unload: '+name);
												return this.index[name];
											}},
										});
										return true;
									},
									Base:{
										get:function() {
												var img = new Image();
												img.src = this.src;
												img.file = this.file;
												img.name = this.name;
												img.number = 1+ App.client.graphics.SpriteLoadErrors++;
												img.onload = function() {
														App.client.graphics.SpriteLoadErrors--;
														Debug.log("GraphicsController: loaded: "+this.name+":"+(App.client.graphics.SpriteLoadErrors));

													};
												return img;
											},
										unload:function() {
												this.Sources.unload(this.name);
												Debug.log("GraphicsController: unload: "+image.name + ":"+this.count);
											}
									},
									getErrors:function(){
										return this.SpriteLoadErrors;
									},
									getImage:function(name){
										return this.Sources.getByName(name);
									},
								},
								constructor:function(app){return {
									app:{value:app},
									init:{value:function(){
											this.graphicsLibrary();
											return true;
										}}
									}
								}
							},
							visuals:{
								prototype:{
									stat:{
											x:0,
											y:0,
											w:0,
											h:0,
											s:0,
											a:0,
											c:0,
											colour:"",
											oldcol:"",
											init:function(col, colold){
											this.x = 0;
											this.y = 0;
											this.w = 0;
											this.h = 0;
											this.s = 0;
											this.a = 0;
											this.c = 0;
											this.colour = col || 0;
											this.oldcol = colold || 0;
											}
										},
									stat2:DefaultObject,
									alpha:0,
									free:false,
									point:14,
									grd:DefaultObject,
									zindex:1,
									seamless:false,
									tight:true,
									disable:false,
									buffer_target:0,

									canvas:DefaultObject,
									buffer:DefaultObject,
									canvas_context:DefaultObject,
									buffer_context:DefaultObject,
									scale:0,
									draw:function(){
										this.canvas_context.clearRect(0,0,window.innerWidth,window.innerHeight);
										if (this.app.client.update.state.initalized)
											this.app.client.update.state.draw();
										this.flip();
											//this.debug();
										this.scale = this.app.client.scale;
									},
									getX:function(){
										return App.ext.input.x-(-App.client.setWidth/2+window.innerWidth/2)+this.app.options.canvas.position.left/3;
									},
									getY:function(){
										return App.ext.input.y-this.app.options.canvas.position.top;
									},
									flip:function(){
										if (this.app.options.canvas.buffer)
										{
											this.canvas_context.drawImage(this.buffer,0,0);
											this.buffer_context.clearRect(0,0,window.innerWidth,window.innerHeight);
										}
									},
									fixX:function(x){
										return ((x*this.scale)+(this.app.client.width/2)-(this.app.client.setWidth/2)*this.scale);
									},
									fixY:function(y){
										return ((y*this.scale)+(this.app.client.height/2)-(this.app.client.setHeight/2)*this.scale);
									},
									fixW:function(w){
										return (w*this.scale);
									},
									fixH:function(h){
										return (h*this.scale);
									},
									chkc:{},
									chk:function(x,y,w,h,s,a,c,colour,font){
										this.chkc = this.colour();
										this.opacity(a);
										this.colour(colour);
										if (!this.free)	return {
											x:this.fixX(x),
											y:this.fixY(y),
											w:this.fixW(w)*s,
											h:this.fixH(h)*s,
											s:s,
											a:a || 0,
											c:c || false,
											colour:colour || this.colour(),
											oldcol:this.chkc,
											font:font || this.font,
											init:this.stat.init
										}
										else return {
											x:x,y:y,
											w:w || 0,
											h:h || 0,
											s:s,
											a:a || 1,
											c:c || false,
											colour:colour || this.colour(),
											oldcol:this.chkc,
											font:font,
											init:this.stat.init
										}
									},
									debug:function(){
										if (!App.ext.debug.strength=="Normal")
											return;
										if ((App.ext.debug.strength=="off")||(App.ext.debug.strength=="none"))
											return;
										this.rect_ext(-this.app.client.setWidth,0,this.app.client.setWidth+this.app.client.setWidth+this.app.client.setWidth,this.point,1,0.1,0);
										this.rect_ext(0,0,this.app.client.setWidth,this.point,1,0.1,0);
										this.text_ext("0",	0,this.point*0.9,this.point*0.9);
										this.text_ext(this.app.client.setWidth,	this.app.client.setWidth-25,this.point*0.9,this.point*0.9);
										if (window.innerWidth>(this.app.client.setWidth*1.1)*this.scale)
											{
												this.text_free(0-this.fixX(0),	30,4+this.fixY(this.point),this.point*0.99);
												this.text_free(this.app.client.width,	window.innerWidth-15,4+this.fixY(this.point),this.point*0.99);
											}
										//this.text_ext("Debug",	this.app.client.setWidth/2.5,this.point*0.9,this.point*0.9);
										//this.text_ext(this.app.client.name,5,25,"#FFFFFF",4,1,0);
										//this.text_ext("app.ext.input",15,40,"#FFFFFF",1,1,0);
										//this.text_ext("x "+Math.round(App.ext.input.x*100)/100		,25,55,"#FFFFFF",1,1,0);
										//this.text_ext("x: "+Math.round(App.ext.input.window.x*100)/100,75,55,"#FFFFFF",1,1,0);
										//this.text_ext("y "+Math.round(App.ext.input.y*100)/100		,25,70,"#FFFFFF",1,1,0);
										//this.text_ext("y: "+Math.round(App.ext.input.window.y*100)/100,75,70,"#FFFFFF",1,1,0);
										if (App.fps<20)
											console.log(App.fps);

										var data = [
													[this.app.client.name],
													[App.code+ " " +App.codefmk],
													[this.app.client.name],
													[
													"app.ext.input",
													"x "+Math.round(App.ext.input.x*100)/100		,
													"x "+Math.round(App.ext.input.window.x*100)/100,
													"d "+App.ext.input.pressed+"   p "+App.ext.input.duration,


													"y "+Math.round(App.ext.input.y*100)/100		,
													"y "+Math.round(App.ext.input.window.y*100)/100,
													(App.ext.useragent.trident)?"Input: "+"Touch":"Input: Mouse",
													],
													[
													"app.client",
													"discription","","",
													"width" ,this.app.client.setWidth,this.app.client.width,
													"height",this.app.client.setHeight,this.app.client.height,
													"fps",Math.round(this.app.client.fps)+"/"+this.app.client.targetfps+":"+Math.round(this.app.client.fps*1000)/1000,"",
													"scale",this.app.client.scale,"",
													"delta",this.app.client.delta,"",
													"buffer","double","",
													],
													[
													"app.client.state","",
													"[ "+this.app.client.update.state.name+" ] : "+this.app.client.Math.Data.Update()+"B",
													"",
													""
													],
													[
													"app.client.data","",
													"visuals ",(App.ext.debug.strength!=="Lite"?this.app.client.Math.Data.kilobyteCount(this.app.client.visuals):"?"),"",
													"graphics ",(App.ext.debug.strength!=="Lite"?this.app.client.Math.Data.kilobyteCount(this.app.client.graphics):"?"),"",
													"audio ",(App.ext.debug.strength!=="Lite"?this.app.client.Math.Data.kilobyteCount(this.app.client.audio):"?"),"",
													"state ",(App.ext.debug.strength!=="Lite"?this.app.client.Math.Data.kilobyteCount(this.app.client.update.state.current):"?"),"",
													"ext ",(App.ext.debug.strength!=="Lite"?this.app.client.Math.Data.kilobyteCount(App.ext):"?"),"",
													"Total ",(App.ext.debug.strength!=="Lite"?this.app.client.Math.Data.Total():"?"),""

													]
												];
												for(var t=0,tt=0,p=65,tr=0,ii=0;ii<data.length&&(6!=ii||"Lite"!=App.ext.debug.strength);++ii)
													{
													for(var i=data[ii].length;0<i;--i)
														0==i%3&&(t=0,tr=15,tt++),
														this.text_ext(data[ii][data[ii].length-i],tr+15+p*t,25+1.1*this.point*tt,"#AAAAAA",1,1,0),
														tr=0,
														t++;
													t=0;
													tt++
													};

										//this.text_ext("D: "+App.ext.input.duration,210,55);
										//this.text_ext("P: "+App.ext.input.pressed,160,55);
										//(App.ext.useragent.trident)?this.text_ext("Input: "+"Touch",160,70):this.text_ext("Input: "+"Mouse",160,70);
										//this.text_ext("I: "+App.ext.input.window.inside+" X: "+App.ext.input.window.x+" Y: "+App.ext.input.window.y,155,70);
										//this.text_ext("app.client",15,85,"#FFFFFF",1,1,0);
										//this.text_ext("Discription: "+this.app.client.discription,25,100,"#FFFFFF",1,1,0);
										//this.text_ext("Fps: "+Math.round(this.app.client.fps)+"/"+this.app.client.targetfps+":"+Math.round(App.ext.fps*1000)/1000,25,115,"#FFFFFF",1,1,0);
										//this.text_ext("Width: "+this.app.client.width,25,130,"#FFFFFF",1,1,0);
										//this.text_ext("Height: "+this.app.client.height,25,145,"#FFFFFF",1,1,0);
										//this.text_ext("setWidth: "+this.app.client.setWidth,110,130,"#FFFFFF",1,1,0);
										//this.text_ext("setHeight: "+this.app.client.setHeight,110,145,"#FFFFFF",1,1,0);
										//this.text_ext("Scale: "+this.scale,25,160,"#FFFFFF",1,1,0);
										//this.text_ext("Delta: "+this.app.client.delta,25,175,"#FFFFFF",1,1,0);
										//this.text_ext("Buffering: "+"Double",25,190,"#FFFFFF",1,1,0);
										//this.text_ext("client.data",15,205,"#FFFFFF",1,1,0);
										//this.text_ext("[ "+this.app.client.update.state.name+" ] : "+this.app.client.Math.Data.Update()+"B",25,220,"#FFFFFF",1,1,0);
										this.text_ext("Log: "+App.ext.debug.text,35,this.app.client.setHeight-25,this.point);
										if (App.ext.debug.strength=="Lite")
											return;

											try {
										//this.text_ext("visuals: " 	+ this.app.client.Math.Data.kilobyteCount(this.app.client.visuals) 		+"kb",25,235,"#FFFFFF",1,1,0);
										}catch(e){}
										//this.text_ext("graphics: " + this.app.client.Math.Data.kilobyteCount(this.app.client.graphics) 		+"kb",25,250,"#FFFFFF",1,1,0);
										//this.text_ext("audio: " 	+ this.app.client.Math.Data.kilobyteCount(this.app.client.audio) 		+"kb",25,265,"#FFFFFF",1,1,0);
										//this.text_ext("_State: " 	+ this.app.client.Math.Data.kilobyteCount(this.app.client.update.state) 	+"kb",25,280,"#FFFFFF",1,1,0);
										//this.text_ext("ext: " 		+ this.app.client.Math.Data.kilobyteCount(App.ext) 					+"kb",25,295,"#FFFFFF",1,1,0);
										//this.text_ext("Total: "		+ this.app.client.Math.Data.Total()								+"kb",25,325,"#FFFFFF",1,1,0);
									},
									clean:function(){
										this.cleanAlpha?this.opacity(1):null;
										this.colour(this.stat.oldcol);
										this.stat.init(this.colour(),this.stat.oldcol);
									},
									colour:function(colour1,colour2) {
										if (colour1)
											{
												return colour1&&(this.buffer_context.fillStyle=colour1);colour2&&(this.buffer_context.strokeStyle=colour2);
											}
											else
											return this.buffer_context.fillStyle;
									},
									opacity:function(opacity) {
										return opacity!=this.alpha&&(this.alpha=opacity,this.canvas_context.globalAlpha=this.buffer_context.globalAlpha=opacity!=this.lastopacity?opacity:1);
									},
									fontT:"",
									fontL:"",
									font:function(font)	{
										font = font + " " + this.fontFamily;
										return font!=this.fontT&&(this.canvas_context.font=this.buffer_context.font=this.fontT=font?font:this.fontL);
									},
									fontFamily:"Droid Sans",
									////Drawing Text////
									text_free:function(string, x, y,colour){
										this.colour(colour);
										this.font(Math.round(this.point*this.scale)+"px "+" sans-serif");
										this.buffer_context.fillText(string,x-this.text_width(string)/2-this.point,y-this.point/2);
										this.clean();
									},
									text_ext:function(string,x,y,colour,s,a,c,style){
										this.stat = this.chk(x,y,this.text_width(string),s,s,a,c,colour);
										var f = this.font();
										this.stat.h = this.stat.s*this.scale;
										this.font(this.stat.h+"em");
										this.stat.h = this.point*this.stat.h;
										(this.stat.c)?this.buffer_context.fillText(string,this.stat.x-this.stat.w/2-this.stat.s,this.stat.y-this.stat.h/2):this.buffer_context.fillText(string,this.stat.x,this.stat.y+this.stat.h/2);
										this.font(f);
										this.clean();
									},
									text_button:function(string,x,y,colour,s,a,c,style){
										this.stat = this.chk(x,y,this.text_width(string),s,s,a,c,colour);
										var f = this.font();
										this.stat.h = this.stat.s*this.scale;
										this.font(this.stat.h+"em "+style);
										this.stat.h = this.point*this.stat.h;
										if (this.touch_within_stat(this.stat))
										{
											this.opacity(this.stat.a-(App.ext.input.pressed*0.2));
											App.ext.cursor.set(App.ext.cursor.pointer,true);
											//if (App.ext.input.released)
											//	if (App.ext.input.delay<1)
											//		loc(),App.ext.input.delay = 1;
											(this.stat.c)?this.buffer_context.fillText(string,this.stat.x-this.stat.w/2-this.stat.s,this.stat.y-this.stat.h/2):this.buffer_context.fillText(string,this.stat.x,this.stat.y+this.stat.h/2);
										}
										else
										{
											this.opacity(this.stat.a*0.75);
											(this.stat.c)?this.buffer_context.fillText(string,this.stat.x-this.stat.w/2-this.stat.s,this.stat.y-this.stat.h/2):this.buffer_context.fillText(string,this.stat.x,this.stat.y+this.stat.h/2);
										}
										this.font(f);
										this.clean();
									},
									within:false,
									shadow:function(col,blur,x,y){
										this.buffer_context.shadowColor = col;
										this.buffer_context.shadowBlur = blur;
										this.buffer_context.shadowOffsetX = x;
										this.buffer_context.shadowOffsetY = y;
									},
									shadow_clear:function(){
										this.buffer_context.shadowBlur = 0;
									},
									text_button_bg:function(string,x,y,colour,s,a,c,loc,style){
										this.stat = this.chk(x,y,this.text_width(string),s,s,a,c,colour);


										this.shadow("#AAAAAA",1,1,1);

										var f = this.font();
										this.stat.h = this.stat.s*this.scale;
										this.font(this.stat.h+"em "+style);
										this.stat.h = this.point*this.stat.h;
										this.within = this.touch_within_stat(this.stat);
										if (this.within)
										{
										this.colour("#00A0F1");
										this.buffer_context.beginPath();
										this.stat.c?this.buffer_context.rect(this.stat.x-this.stat.w/2, this.stat.y-this.stat.h/2, this.stat.w, this.stat.h):this.buffer_context.rect(this.stat.x-this.stat.w*0.2, this.stat.y-this.stat.h*0.2, this.stat.w*1.1, this.stat.h*1.1);
										this.buffer_context.fill();

										this.colour("#DDDDDD");
											//this.rect_ext(this.stat.x-this.stat.w/4,this.stat.y-this.stat.h/5,this.stat.w*1.1,this.stat.h*1.1,1,1,0,"#00A0F1");
											this.opacity(this.stat.a-(App.ext.input.pressed*0.2));
											App.ext.cursor.set(App.ext.cursor.pointer,true);
											if (App.ext.input.released)
												if (App.ext.input.delay<1)
													loc(),App.ext.input.delay = 1;


											(this.stat.c)?this.buffer_context.fillText(string,this.stat.x-this.stat.w/2-this.stat.s,this.stat.y-this.stat.h/2):this.buffer_context.fillText(string,this.stat.x,this.stat.y+this.stat.h/2);
										}
										else
										{
											this.opacity(this.stat.a*0.75);
											(this.stat.c)?this.buffer_context.fillText(string,this.stat.x-this.stat.w/2-this.stat.s,this.stat.y-this.stat.h/2):this.buffer_context.fillText(string,this.stat.x,this.stat.y+this.stat.h/2);
										}
										this.font(f);
										this.clean();
									},
									text:function(string, x, y,colour){
										this.text_ext(string,x,y,colour,1,1,0,"Calibri");
									},
									text_shadow:function(blur,x,y,colour){
										this.buffer_context.shadowColor = colour;
										this.buffer_context.shadowBlur = blur;
										this.buffer_context.shadowOffsetX = x;
										this.buffer_context.shadowOffsetY = y;
									},
									rect:function (x,y,w,h,colour){
										this.rect_ext(x,y,w,h,1,1,0,colour);
									},
									rect_centered:function (x,y,w,h,colour){
										this.rect_ext(x,y,w,h,1,1,1,colour);
									},
									rect_ext:function(x,y,w,h,s,a,c,colour){
										this.stat = this.chk(x,y,w,h,s,a,c,colour);
										this.buffer_context.beginPath();
										this.stat.c?this.buffer_context.rect(this.stat.x-this.stat.w/2, this.stat.y-this.stat.h/2, this.stat.w, this.stat.h):this.buffer_context.rect(this.stat.x, this.stat.y, this.stat.w, this.stat.h);
										this.buffer_context.fill();

										this.clean();
									},
									rect_stroke:function(x,y,w,h,s,a,c,colour,l){
										this.stat = this.chk(x,y,w,h,s,a,c,colour);
										this.buffer_context.beginPath();
										this.stat.c?this.buffer_context.rect(this.stat.x-this.stat.w/2, this.stat.y-this.stat.h/2, this.stat.w, this.stat.h):this.buffer_context.rect(this.stat.x, this.stat.y, this.stat.w, this.stat.h);
										this.buffer_context.fillStyle = 'transparent';
										this.buffer_context.fill();
										this.buffer_context.lineWidth = l || 1;
										this.buffer_context.strokeStyle = colour;
										this.buffer_context.stroke();

										this.clean();
									},
									setting:true,
									rect_button:function(x,y,w,h,s,a,colour,loc,c){
										this.stat = this.chk(x,y,w,h,s,a,c,colour);
										var t = false;
										if (this.touch_within(this.stat.x,this.stat.y,this.stat.w,this.stat.h,this.stat.c))
										{
											t = true;
											App.ext.cursor.set(App.ext.cursor.pointer,true);
											if (App.ext.input.released)
												if (App.ext.input.delay<1)
													loc(),App.ext.input.delay = 1;
										}
										if (this.setting)
											this.rect_ext(x,y,w,h,s,a,c,colour);
											//else
											var ww = 1;
											if (t)
											this.rect_ext(x-ww,y-ww,w+ww*2,h+ww*2,s,a,c,colour);
									},
									rect_rotate:function(x,y,w,h,colour,s,a,angle){
										this.stat = this.chk(x,y,w,h,s,a,1,colour);
										this.buffer_context.translate(this.stat.x,this.stat.y);
										this.buffer_context.rotate(angle*0.0174532925);
										this.stat.c?this.buffer_context.rect(0-this.stat.w/2,0-this.stat.h/2, this.stat.w, this.stat.h):this.buffer_context.rect(0, 0, this.stat.w, this.stat.h);
										this.buffer_context.rotate(-angle*0.0174532925);
										this.buffer_context.translate(-this.stat.x,-this.stat.y);
										this.clean();
									},
									rect_gradient:function(x,y,w,h,s,a,c,colour,colour2,angle){
										this.stat = this.chk(x,y,w,h,s,a,c,colour);
										return;
										console.log(x,y,w,h,s,a,c,c,colour,colour2,angle);
										console.log(this.stat.x,this.stat.y,this.stat.w,this.stat.h,this.stat.s,this.stat.a,this.stat.c,this.stat.colour);
										this.buffer_context.translate(this.stat.x,this.stat.y);
										this.buffer_context.rotate(angle*0.0174532925);

										this.stat.c?this.grd = this.buffer_context.createLinearGradient(this.stat.w/2,0, this.stat.w/2, this.stat.h/2):this.grd = this.buffer_context.createLinearGradient(0,0, this.stat.w, this.stat.h);
										this.buffer_context.beginPath();
										this.stat.c?this.buffer_context.rect(0-this.stat.w/2,0-this.stat.h/2, this.stat.w, this.stat.h):this.buffer_context.rect(0, 0, this.stat.w, this.stat.h);
										this.grd.addColorStop(0, colour);
										this.grd.addColorStop(1, colour2);
										this.buffer_context.fillStyle = this.grd;
										this.buffer_context.fill();
										this.buffer_context.rotate(-angle*0.0174532925);
										this.buffer_context.translate(-this.stat.x,-this.stat.y);
										this.clean();
									},
									rect_free:function(x,y,w,h,s,a,c,colour){
										this.stat = this.chk(x,y,w,h,s,a,c,colour);
										this.buffer_context.beginPath();
										(c)?this.buffer_context.rect(x-w/2, y-h/2, w, h):this.buffer_context.rect(x, y, w, h);
										this.buffer_context.fill();
										this.clean();
									},
									image_ext:function(image,x,y,s,a,c){
										this.stat = this.chk(x,y,image.width,image.height,s,a,c);
										(this.stat.c)?this.buffer_context.drawImage(image,this.stat.x-this.stat.w/2,this.stat.y-this.stat.h/2,this.stat.w,this.stat.h):this.buffer_context.drawImage(image,this.stat.x,this.stat.y,this.stat.w,this.stat.h);
									},
									image_centered:function(image,x,y){
										this.image_ext(image,x,y,1,1,true);
									},
									image:function(image,x,y){
										this.image_ext(image,x,y,1,1,false);
									},
									image_part:function(image,x,y,s,a,c,xx,yy,w,h){
										this.stat = this.chk(x,y,w,h,s,a,c);
										this.buffer_context.drawImage(image,this.stat.x-this.stat.w/2,this.stat.y-this.stat.h/2,this.stat.w,this.stat.h,1,1,image.width,image.height);
									},
									image_rotate:function(image,x,y,s,angle,a,xoff,yoff){
										this.stat = this.chk(x,y,image.width,image.height,s,a,true);
										this.buffer_context.translate(this.stat.x,this.stat.y);
										this.buffer_context.rotate(angle*0.0174532925);
										(this.stat.c)?this.buffer_context.drawImage(image,0-this.stat.w/2,0-this.stat.h/2,this.stat.w,this.stat.h):this.buffer_context.drawImage(image,0,0,this.stat.w,this.stat.h);
										this.buffer_context.rotate(-angle*0.0174532925);
										this.buffer_context.translate(-this.stat.x,-this.stat.y);
									},

									image_button:function(image,x,y,s,loc,highlight,xscale,yscale,a,centered){
										this.stat = this.chk(x,y,image.width*s*xscale,image.height*s*yscale,s,a,centered);
										var s = this.stat2 = this.chk(x,y,(image.width*s*xscale)*0.9,(image.height*s*yscale)*0.9,s,a,centered);
										var w = false;
										if (this.touch_within_stat(s))
										{
											w = true;
											this.opacity(this.stat.a-(App.ext.input.pressed*0.2));
											App.ext.cursor.set(App.ext.cursor.pointer,true);
											if (App.ext.input.released)
												if (App.ext.input.delay<1)
													loc(),App.ext.input.delay = 1;
											(this.stat.c)?this.buffer_context.drawImage(image,this.stat.x-this.stat.w/2,this.stat.y-this.stat.h/2,this.stat.w,this.stat.h):this.buffer_context.drawImage(image,this.stat.x,this.stat.y,this.stat.w,this.stat.h);
										}
										else
										{
											this.opacity(this.stat.a*0.75);
											(this.stat.c)?this.buffer_context.drawImage(image,this.stat.x-this.stat.w/2,this.stat.y-this.stat.h/2,this.stat.w,this.stat.h):this.buffer_context.drawImage(image,this.stat.x,this.stat.y,this.stat.w,this.stat.h);
										}
										return w;
									},
									touch_within:function(x, y, w, h,c) {
										var doc = document.documentElement;
										this.left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
										this.top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);
										y = y - this.top;
										x = x - this.left;
										return c?((App.ext.input.x>x-w/2&&App.ext.input.x<x+w/2&&App.ext.input.y>y-h/2&&App.ext.input.y<y+h/2)?true:false):((App.ext.input.x>x&&App.ext.input.x<x+w&&App.ext.input.y>y&&App.ext.input.y<y+h)?true:false);
									},
									touch_within_stat:function(stat) {
										var doc = document.documentElement;
										this.left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
										this.top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);
										stat.y = stat.y - this.top;
										stat.x = stat.x - this.left;
										return stat.c?((App.ext.input.x>stat.x-stat.w/2&&App.ext.input.x<stat.x+stat.w/2&&App.ext.input.y>stat.y-stat.h/2&&App.ext.input.y<stat.y+stat.h/2)?true:false):((App.ext.input.x>stat.x&&App.ext.input.x<stat.x+stat.w&&App.ext.input.y>stat.y&&App.ext.input.y<stat.y+stat.h)?true:false);
									},
									line:function(x,y,x2,y2,col,a){
										this.stat = this.chk(x,y,x2,y2,1,a,true);
										this.stat2 = this.chk(x2,y2,x2,y2,1,a,true);
										this.buffer_context.beginPath();
										this.buffer_context.moveTo(this.stat.x,this.stat.y);
										this.buffer_context.lineTo(this.stat2.x,this.stat2.y);
										this.buffer_context.strokeStyle = col;
										this.buffer_context.stroke();
										this.clean();
									},
									lines:function(x,y,x2,y2,col,a,s){
										this.stat = this.chk(x,y,x2,y2,1,a,true);
										this.stat2 = this.chk(x2,y2,x2,y2,1,a,true);
										this.buffer_context.moveTo(this.stat.x*s,this.stat.y*s);
										this.opacity(a);
										this.buffer_context.strokeStyle = col;
										this.buffer_context.lineTo(this.stat2.x*s,this.stat2.y*s);
									},
									lineend:function(){
										this.buffer_context.stroke();
									},
									linestart:function(){
										this.buffer_context.beginPath();
									},
									triangle:function(x0,y0,x1,y1,x2,y2,col,col2,width){
									//this.buffer_context.fillStyle = col;
									//this.buffer_context.strokeStyle = col2;
										this.colour(col,col2);
										this.buffer_context.lineWidth = width;
										this.buffer_context.moveTo(x0,y0); // give the (x,y) coordinates
										this.buffer_context.lineTo(x1,y1);
										this.buffer_context.lineTo(x2,y2);
										this.buffer_context.lineTo(x0,y0);
										this.buffer_context.fill();
										this.buffer_context.stroke();
										this.buffer_context.closePath();
										this.clean();
									},
									circle:function(x,y,r,col,a){
										this.stat = this.chk(x,y,1,1,r,a,true,col);
										this.buffer_context.beginPath();
										this.buffer_context.arc(this.stat.x, this.stat.y, this.stat.s*this.scale, 0, 2 * Math.PI, false);
										this.buffer_context.fillStyle = this.stat.colour;
										this.buffer_context.fill();
									},
									circle_free:function(x,y,r,col,a){
										this.stat = this.chk(x,y,r,r,r,a,1,col);
										this.buffer_context.beginPath();
										this.buffer_context.arc(x, y, r*this.scale, 0, 2 * Math.PI, false);
										this.buffer_context.fillStyle = this.stat.col;
										this.buffer_context.fill();
										this.clean();
									},
									text_width:function(string) {
										return this.buffer_context.measureText(string).width; // Not WOrking
									}
								},
								constructor:function(app){return {
									app:{value:app},
									init:{value:function(){
											this.scale = this.app.scale;
											this.canvas = this.app.canvas.getCanvas();
											this.buffer = this.app.canvas.getBuffer();
											this.canvas_context = this.canvas.getContext("2d");
											if (this.app.options.canvas.buffer)
												this.buffer_context = this.buffer.getContext("2d");
												else
												this.buffer_context = this.canvas.getContext("2d");
											}
										}
									}
								}
							},
							_Cookies:{
								prototype:{
									list:new Array(),
									expires:"",
									nameEQ:"=",
									ca:"",
									createCookie:function(name,value,days){
										if (days) {
											var date = new Date();
											date.setTime(date.getTime()+(days*24*60*60*1000));
											this.expires = "; expires="+date.toGMTString();
										}
										else this.expires = "";
										document.cookie = name+"="+value+";"+this.expires+"; path=/";
									return this.list.push(value);
									},
									readCookie:function(name){
										this.nameEQ = name + "=";
										this.ca = document.cookie.split(';');
										for(var i=0;i < this.ca.length;i++) {
											var c = this.ca[i];
											while (c.charAt(0)==' ') c = c.substring(1,c.length);
											if (c.indexOf(this.nameEQ) == 0) return c.substring(this.nameEQ.length,c.length);
										}
										//return null;
									},
									eraseCookie:function(name){
										this.createCookie(name,"",-1);
									}
								},
								constructor:function(){return {
										init:{value:function(){
													Debug.log('Cookies: Init');
												return true;
												}
											}
										}
									}
								},
								discription:"",
								scale:1,
								delta:1,
								width:0,
								height:0,
								setWidth:0,
								setHeight:0,
								resized:false,
								targetfps:60,
								_Main:{constructor:function(){return {name:{value:"Main"}};}}
								},
							constructor:function(a){return{
								app:{value:a},
								init:{value:function(name,w,h){
											(this.app.ext = this.app.Construct(this.app.ext.prototype,this.app.ext.constructor)).init(name);
											this.discription = "Eh";
											this.w = this.width = this.setWidth = w;
											this.h = this.height = this.setHeight = h;
											(this.visuals = this.app.Construct(this.visuals.prototype,this.visuals.constructor)).init(this);
											(this.graphics = this.app.Construct(this.graphics.prototype,this.graphics.constructor)).init();

											this._Room = Object.create(this._Room.prototype,this._Room.constructor()).init();
											(this.cookies = this._Cookies = Object.create(this._Cookies.prototype,this._Cookies.constructor())).init();
											(this.audio = this.audio = Object.create(this.audio.prototype,this.audio.constructor())).init();
											(this.mainLoop = Object.create(this._Pace.prototype,this._Pace.constructor(this))).init(this.targetfps,this.targetfps);
											(this.second = Object.create(this._Pace.prototype,this._Pace.constructor(this))).init(1.0,this.targetfps);
											this._Main = Object.create(_Main.prototype,this._Main.constructor());
											(this.update.state = Object.create(this.update.state.prototype,this.update.state.constructor())).init(this._Main);
										}
									}
								}
							}
						}
					},
					constructor:{
							Init:{writable: true,  configurable:true, enumerable:false, value:function(name,w,h){
								(this.canvas = this.Construct(this.canvas.prototype,this.canvas.constructor)).init();
								this.client.init(name,w,h);
								}
							},
							Construct:{writable:false, configurable:false, enumerable:false, value:function(prototype,constructor){
								var c = typeof constructor;
								switch(c)
									{
									case 'undefined':
										return Object.create(prototype);
									break;
									case 'object':
										return Object.create(prototype,constructor);
									break;
									case 'function':
										return Object.create(prototype,constructor(this));
									break;
									default:
										console.log("Expected 'object' or 'function': Type is "+c);
										return {};
									}
								}
							},
							OnApplicationLoad:{writable:false, configurable:false, enumerable:false, value:function(){
								App.OnStart();
								App.OnLoad();
								}
							},
							OnStart:{writable:false, configurable:false, enumerable:false, value:function(){
								(this.client = this.Construct(this.client.prototype,this.client.constructor));
								(this.time = (( new Date().getTime())-TT)*100);
								setTimeout(	function(A){

												function AppLoop(){
													App=A;
													A.client.loop(A);
												}
												A.client.start(AppLoop,A.scale);
											}(this),this.time);
								}
							},
							OnLoad:{writable:true, configurable:false, enumerable:false, value:function(){
								App.Init("Spice.js",480,320);
								}
							},
							scripts:{value:window.scripts},
							codefmk:{value:'0.6.50.14.26.06.min'},
							code:{value:"0"}
					},
					scripts:[],
					framesT:0.0,
					frames:0.0,
					delta:0.0,
					debug:false,

					time:0,
					fps:0,
					width:320,
					height:480
				});

				App = Object.create(App.prototype,App.constructor);
				addListener(document, "DOMContentLoaded", App.OnApplicationLoad);
				/*	Dynamically Loading Scripts
				Scripts = window.scripts = [''];
								if ((!function(e,t,r){function n(){for(;d[0]&&"loaded"==d[0][f];)c=d.shift(),c[o]=!i.parentNode.insertBefore(c,i)}for(var s,a,c,d=[],i=e.scripts[0],o="onreadystatechange",f="readyState";s=r.shift();)a=e.createElement(t),"async"in i?(a.async=!1,e.head.appendChild(a)):i[f]?(d.push(a),a[o]=n):e.write("<"+t+' src="'+App.options.paths.data+s+'" defer></'+t+">"),a.src=App.options.paths.data+s}(document,"script",window.scripts))){};
				*/

				/* Custom Polyfill for RequestAnimationFrame */
				if (!Date.now)
				    Date.now = function() { return new Date().getTime(); };

				(function() {
				    'use strict';

				    var vendors = ['webkit', 'moz'];
				    for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
				        var vp = vendors[i];
				        window.requestAnimationFrame = window[vp+'RequestAnimationFrame'];
				        window.cancelAnimationFrame = (window[vp+'CancelAnimationFrame']
				                                   || window[vp+'CancelRequestAnimationFrame']);
				    }
				    if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) // iOS6 is buggy
				        || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
				        var lastTime = 0;
				        window.requestAnimationFrame = function(callback) {
				            var now = Date.now();
				            var nextTime = Math.max(lastTime + 16, now);
				            return setTimeout(function() { callback(lastTime = nextTime); },
				                              nextTime - now);
				        };
				        window.cancelAnimationFrame = clearTimeout;
				    }
				}());



	</script>

<!-- STATE -->

<script rel=prefetch type="text/javascript">

	var START = window.location.search.split("=").length>1?window.location.search.split("=")[1]:'';


	var forward = function(){
         App.client.update.state.current.forward();
	}
	var back = function(){
		App.client.update.state.current.galleryIndex--;
		App.client.update.state.current.incheck = false;
		App.client.update.state.current.dir = -1;
	}
 App.OnLoad = function(){
		App.options.canvas.override = true;
		App.options.canvas.position.position = "fixed";
		App.options.canvas.position.z = -3;
		App.options.canvas.position.left = 0;
		App.options.canvas.position.top = 0;
		App.options.canvas.size.height = window.innerHeight;
		App.options.canvas.size.width = window.innerWidth-20;
		App.Init("Spice.js",944,720);

   }
_Main.prototype = {
         name:"game.ryanspice.com",
   init:function() {
		 this.game = START;




		this.l = 0;
		this.h = 1;
		this.v = 0.1;
		this.x = 0;
		this.y = 0;
		this.s = 1;
		this.ss = 0;
		this.FogY = 0;
		this.FogY2 = 0;
		this.fader = 0;
		this.fade = false;
		this.StartAlpha = 0;
		this.FogY = 0;
		this.xxx = 0;
		this.selecter = 0;
		this.boxoffset = 0;
		this.revAngle = 0;
		this.gallery = [];
		this.alpha = [];
		this.alpha[0] = 1;
		this.alpha[1] = 1;
		this.alpha[2] = 1;
		this.alpha[3] = 1;
		this.alpha[4] = 1;
		this.alpha[5] = 1;
		this.alpha[6] = 1;
                          this.sel =0;
		this.WaterY = 0;
		this.viewX = 0;
		this.cloudX = 0;
		this.cloudSize = 25;
		this.cx=[];
		this.cc = 20 + Math.floor(this.app.client.setWidth/this.cloudSize);

		for(var i=this.cc;i>=0;--i)
			this.cx[i] = i*this.cloudSize;

		this.flappyfishArray = [];
		this.flappyfishArray[0] = this.graphics.load("F00","https://ryanspice.com/images/FlappyFish/FlappyFish0");
		this.flappyfishArray[1] = this.graphics.load("F02","https://ryanspice.com/images/FlappyFish/FlappyFish1");
		this.flappyfishArray[2] = this.graphics.load("F01","https://ryanspice.com/images/FlappyFish/FlappyFish2");
		this.galleryFlappyBackgrounds = [];
		this.galleryFlappyBackgrounds[0] = this.graphics.load("FF0","https://ryanspice.com/images/FlappyFish/FlappyFishClouds");
		this.galleryFlappyBackgrounds[1] = this.graphics.load("FF1","https://ryanspice.com/images/FlappyFish/FlappyFishGradient");
		this.galleryFlappyBackgrounds[2] = this.graphics.load("FF2","https://ryanspice.com/images/FlappyFish/FlappyFishGround");
		this.galleryFlappyBackgrounds[3] = this.graphics.load("FF3","https://ryanspice.com/images/FlappyFish/FlappyFishWave");
		this.galleryFlappyBackgrounds[1].width = this.app.client.setWidth;
		this.galleryFlappyBackgrounds[1].height = this.app.client.setHeight;

		this.gallerySnowBackgrounds = [];
		this.gallerySnowBackgrounds[0] = this.graphics.load("eh","https://ryanspice.com/images/SnowBoarding/bg_m1.min");
		this.gallerySnowBackgrounds[1] = this.graphics.load("be","https://ryanspice.com/images/SnowBoarding/bg_m2.min");
		this.gallerySnowBackgrounds[2] = this.graphics.load("ce","https://ryanspice.com/images/SnowBoarding/bg_fog1.min");
		this.gallerySnowBackgrounds[3] = this.graphics.load("de","https://ryanspice.com/images/SnowBoarding/bg_fog2.min");
		this.gallerySnowBackgrounds[4] = this.graphics.load("ee","https://ryanspice.com/images/SnowBoarding/bg_cloud1.min");
		this.gallerySnowBackgrounds[5] = this.graphics.load("ef","https://ryanspice.com/images/SnowBoarding/bg_cloud2.min");
		this.gallerySnowBackgrounds[6] = this.graphics.load("je","https://ryanspice.com/images/SnowBoarding/bg_m3.min");

		this.galleryKongBackgrounds = [];
		this.galleryKongBackgrounds[0] = this.graphics.load("kongquest00","https://ryanspice.com/images/KongQuest/45272.min");
		this.galleryKongBackgrounds[1] = this.graphics.load("kongquest01","https://ryanspice.com/images/KongQuest/26894.min");
		this.galleryKongBackgrounds[2] = this.graphics.load("kongquest02","https://ryanspice.com/images/KongQuest/guy1.min");
		this.galleryKongBackgrounds[3] = this.graphics.load("kongquest03","https://ryanspice.com/images/KongQuest/skullkart.min");
		this.galleryKongBackgrounds[4] = this.graphics.load("kongquest04","https://ryanspice.com/images/KongQuest/rail");

		this.galleryRevBackgrounds = [];
		this.galleryRevBackgrounds[0] = this.graphics.load("revBG1","https://ryanspice.com/images/ReverenceLost/reverenceBackground1.min");
		this.galleryRevBackgrounds[1] = this.graphics.load("revBG2","https://ryanspice.com/images/ReverenceLost/reverenceBackground2.min");
		this.galleryRevBackgrounds[2] = this.graphics.load("revBG3","https://ryanspice.com/images/ReverenceLost/reverenceBackground3.min");
		this.galleryRevBackgrounds[3] = this.graphics.load("revBG3","https://ryanspice.com/images/ReverenceLost/reverenceBackground4.min");
		this.galleryRevBackgrounds[4] = this.graphics.load("revBG3","https://ryanspice.com/images/ReverenceLost/reverenceBackground5.min");
		this.galleryRevBackgrounds[5] = this.graphics.load("revBG3","https://ryanspice.com/images/ReverenceLost/reverenceBackground0.min");

                            this.sy=0;
                                this.app.ext.title("RyanSpice.Com - ReverenceLost");
								this.app.ext.metatag.metaAppend(this.app.ext.metatag.metaLink("https://ryanspice.com/images/favicon_ReverenceLost.png","shortcut icon","image/png"));
                                this.app.canvas.background_set("rgba(25,25,25,0)");
                                this.app.canvas.getCanvas().style.pointerEvents = "none";
                                this.app.ext.top();
								this.dir = 0;
                                this.w = this.app.client.setWidth;
                                this.h = this.app.client.setHeight;
                                this.x = 0;
                                this.y = 0;
								this.incheck = true;
								this.incheckFade = 1;
								this.galleryIndex = 0;
								this.galleryImages = ["https://ryanspice.com/images/snowboarding/wp_ss_20140720_0002.min",
													  "https://ryanspice.com/images/snowboarding/wp_ss_20140720_0003.min",
													  "https://ryanspice.com/images/snowboarding/wp_ss_20140720_0004.min",
													  "https://ryanspice.com/images/snowboarding/wp_ss_20140720_0005.min",
													  "https://ryanspice.com/images/snowboarding/wp_ss_20140720_0006.min"];
								this.galleryImage = document.getElementsByClassName("galleryImg")[0];
								this.galleryImage.src = "https://ryanspice.com/images/ReverenceLost/preview_ReverenceLost" + this.galleryIndex + ".png";
								this.backgrounds = [];
								this.sections = [];
                                this.template = document.getElementsByClassName("template")[0];
                                this.title_game = document.getElementsByTagName("h1")[0];
								this.sections[0] = this.gallery = document.getElementsByClassName("gallery")[0];
								this.sections[1] = this.features = document.getElementsByClassName("features")[0];
								this.sections[2] = this.controls = document.getElementsByClassName("controls")[0];
								this.sections[3] = this.writeup = document.getElementsByClassName("writeup")[0];
								this.sections[4] = this.title = document.getElementsByClassName("titleDiv")[0];
								this.sections[5] = this.image = document.getElementsByClassName("image")[0];
								this.sections[6] = this.image2 = document.getElementsByClassName("image")[0];
								this.sections[7] = this.image3 = document.getElementsByClassName("image")[0];
								this.sections[8] = document.getElementsByClassName("title")[0];
								this.sections[9] = document.getElementsByClassName("series")[0];
								this.sections[10] = document.getElementsByClassName("vid")[0];
								this.sections[11] = document.getElementsByClassName("vid1")[0];
								this.sections[12] = document.getElementsByClassName("navlist")[0];
								//this.sections[5].src = "http://ryanspice.com/R4/spicejsicon.png";
								//this.sections[6].src = "http://www.blog.catblogosphere.com/cb-content/uploads/2013/07/google_play_icon.png";
								//this.sections[7].src = "https://www.neverloseit.com.au/wp-content/uploads/2013/04/windows-store-icon.jpg";

								this.count = 0;
							this.doc = document;

							this.lastfont = 0;
							this.galleryImage.style.position = "relative";


              for(var i=this.sections.length-1;i>=0;--i){

								continue;

								if (i==8)
									continue;

								var font = this.app.client.Math.Clamp(0.7*Math.round(window.innerWidth/1080*100)/100,1,3)+"em";
                                //font = this.app.client.math.clamp(font,0.4,1);
									this.lastfont = font+"em";
									this.sections[i].style.fontSize = font;

							}


            this.state=Snowboarding.Menu;this.state.visuals=this.visuals;this.state.app=this.app;this.state.graphics=this.graphics;this.state.init();
            return true;
},
    forward:function(){
						App.client.update.state.current.galleryIndex++;
						App.client.update.state.current.incheck = false;
						App.client.update.state.current.dir = 1;
						App.client.update.state.current.count = 0;


  },
        update:function() {
                            this.state.update();
                            if (this.game){
                                if (this.game=="ReverenceLost")
                                        this.title_game.style.opacity = 0;
                                else
                                        this.title_game.style.opacity = 1;
                                            this.FogY-=1*this.app.delta;
                                            this.lastFogY = this.fogY;
                                            this.fogY = Math.sin(this.FogY/100);
                                            this.y+=(this.v*this.s)*(this.app.delta);
                                            this.StartAlpha+= 0.03*this.End*this.app.delta;

                                            this.backgroundPos = Math.sin(this.y/this.app.client.setWidth);
                                            this.FogY2 =(1+Math.sin(this.FogY/180)*0.5);
                                            this.FogY3 = 0.5+this.FogY2;
                                            this.FogY4 =(0.6+Math.sin(this.FogY/90)*0.5);

                                            if (this.WaterY<0)
                                                {
                                                this.WaterY+=App.client.delta*1;
                                                return;
                                                }

                                            this.viewX +=App.client.delta*1;
                                            if (this.cloudX>-140)
                                                this.cloudX -= App.client.delta*1;
                                            else{
                                                this.cloudX = this.app.client.setWidth + 140;
                                                this.cloudY = Math.random()*200;
                                                }
                                            for(var i=this.cc;i>=0;--i)
                                                    if (-this.viewX +this.cx[i]<-this.cloudSize*5)
                                                        this.cx[i] = this.viewX +this.app.client.setWidth+this.cloudSize*5;

                                    var doc = document.documentElement;
                                    //var left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
                                    var top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);
                                            //this.sy = top;
                                            var a = (-this.sy+top)/2;
                                            if (this.sy<top)
                                            this.sy+=a;

                                            if (this.sy>top)
                                            this.sy+=a;
                                            }
                            //this.sy = top;
							this.count+=0.002;
							if (this.count>1)
								this.count = 0,this.forward();
							var doc = this.doc;
							var docw = window.innerWidth;
							App.options.canvas.size.width = docw-20;

                            App.options.canvas.size.height = window.innerHeight;
							//App.options.canvas.size.height = docw-20;
							//App.canvas.getCanvas().style.top=this.sy+"px";
							this.galleryIndex = App.client.Math.Wrap(this.galleryIndex,0,this.galleryImages.length-1);
							if (!this.incheck)
								if (this.incheckFade<0.2)
									this.galleryImage.src = "https://ryanspice.com/images/ReverenceLost/preview_ReverenceLost" + this.galleryIndex + ".png";
							if (!this.incheck)
							{
								if (this.incheckFade>-0.5*this.app.client.delta)
								{
								this.incheckFade-=0.1*this.app.client.delta;
								}else{this.incheck=true;this.dir=-this.dir;}
							}
							if (this.incheck)
								if (this.incheckFade<1)
								this.incheckFade+=0.1*this.app.client.delta;


								this.galleryImage.style.opacity = this.incheckFade;
								//this.galleryImage.style.left = + this.dir*(-100+ this.incheckFade*100)+"px";

                            var font = this.app.client.Math.Clamp(0.7*Math.round(window.innerWidth/1080*100)/100,1,3)+"em";

														return;

							for(var i=this.sections.length-1;i>=0;--i){
								if (i==8)
									continue;
                                element = this.sections[i];
								//if (i==12)
								//	continue;
								//if (i==2)
								//	continue;

								if (this.lastfont != font)
								{
									this.lastfont = font+"px";
									element.style.fontSize = font;
								}
								if (docw<=720)
								{
									element.style.width = "85%";
                                    element.style.marginLeft = "8%";
								}
								else
								{
									element.style.width = "490";
                                    element.style.marginLeft = "0px";

								}
                                //this.sections[i].style.position = "relative";
                                //this.sections[i].style.top = Math.round(-this.sy*0.5)+"px";
                                //element.style.position = "relative";
                                //element.style.top = -this.sy*0.2 +"px";
                                //d = Math.round((window.innerHeight+100 - (element.offsetTop - element.scrollTop + element.clientTop)+this.sy)/500);
//this.sections[i].style.marginBottom = "0px";
//this.sections[i].style.paddingBottom = "0px";
//this.sections[i].style.marginTop = "0px";
							}
							if (docw>=720)
							{
								this.sections[0].style.width="48.5%";
								this.sections[2].style.width="98.1%";
								this.sections[11].style.width="98%";




								this.sections[4].style.width="initial";
								this.sections[4].style.float="";
								this.sections[4].style.marginLeft="0px	";

								this.sections[3].style.width="98%";
								this.sections[9].style.width="98%";

								this.sections[10].style.marginLeft="-3.5%";
								this.sections[10].style.width="100%";
								this.sections[11].style.position="relative";
								this.sections[11].style.left="-3px";
								this.sections[11].style.maxWidth="720px";

								this.sections[9].style.height="150px";
								this.sections[9].style.fontSize="0.9em";

								this.sections[1].style.minHeight="0";
							}
                            else
                            {
								this.sections[9].style.height="275px";

								this.sections[1].style.minHeight="250px";

								this.sections[11].style.maxWidth="100%";
								this.sections[11].style.position="relative";
								this.sections[11].style.left="-10px";
                            }

							if (docw<=1024)
							if (docw>=720)
							{
								this.sections[0].style.width="48%";
								this.sections[1].style.width="46%"

							}
							else
							{
							}
                            this.sections[9].style.fontSize=this.app.client.Math.Clamp(0.6*Math.round(window.innerWidth/1080*100)/100,1,3)+"em";
                            this.sections[9].style.marginBottom='75px';
                            this.sections[9].style.paddingBottom='50px';
							if (this.sections[1].style.height != this.sections[0].clientHeight-6+"px")
								this.sections[1].style.height = this.sections[0].clientHeight-6+"px";
                            return true;
        },
            draw:function() {
                Snowboarding.Menu.backgroundFunction2(this.game);
                return true;
                }
        };



			  </script>


			<!-- <%

    if (htmlWebpackPlugin.options.googleAnalytics) { %>
    <script type="text/javascript">
      window.GoogleAnalyticsObject='ga';window.ga=function(){ga.q.push(arguments)};ga.q=[];ga.l=+new Date;<%

      if (htmlWebpackPlugin.options.googleAnalytics.trackingId) { %>
      ga('create','<%= htmlWebpackPlugin.options.googleAnalytics.trackingId %>','auto');<%
      } else { throw new Error("html-webpack-template requires googleAnalytics.trackingId config"); } %><%

      if (htmlWebpackPlugin.options.googleAnalytics.pageViewOnLoad) { %>
      ga('send','pageview')<%
      } %>
    </script>
    <script async defer src="https://www.google-analytics.com/analytics.js" type="text/javascript"></script><%
    } %>

		-->

		<!-- Global site tag (gtag.js) - Google Analytics -->

		<script async src="https://www.googletagmanager.com/gtag/js?id=UA-38949835-1"></script>

		<script>
			window.dataLayer = window.dataLayer || [];
		  function gtag(){dataLayer.push(arguments);}
		  gtag('js', new Date());
		  gtag('config', 'UA-38949835-1');
		</script>

		<meta name="viewport" content="width=device-width">

		<link rel="manifest" href="./manifest.json">

		<link href="https://ryanspice.com/favicon.ico" rel="shortcut icon" type="image/png">

		<!-- Google Fonts -->

		<style>
			@import url("https://fonts.googleapis.com/css?family=Niramit");
			@import url("https://fonts.googleapis.com/css?family=Droid+Sans");
			@import url("https://fonts.googleapis.com/css?family=Open+Sans+Condensed:700");
			@import url("https://fonts.googleapis.com/css?family=Syncopate");
			@import url("https://fonts.googleapis.com/css?family=Bubblegum+Sans");
			@import url("https://fonts.googleapis.com/css?family=VT323:400");
		</style>

		<!-- Instant CSS -->

		<style>
			/*! CSS Used from: https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css */
			html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;
				background:rgba(55,55,55,255);
			}
			body {width:calc(100% - 2rem);}
			main,section{display:block;}
			a{background-color:transparent;}
			a:active,a:hover{outline:0;}
			input{margin:0;font:inherit;color:inherit;}
			input::-moz-focus-inner{padding:0;border:0;}
			input{line-height:normal;}
			@media print{
			*,:after,:before{color:#000!important;text-shadow:none!important;background:0 0!important;-webkit-box-shadow:none!important;box-shadow:none!important;}
			a,a:visited{text-decoration:underline;}
			h2{orphans:3;widows:3;}
			h2{page-break-after:avoid;}
			}
			*{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;}
			:after,:before{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;}
			html{font-size:10px;-webkit-tap-highlight-color:rgba(0,0,0,0);}
				body{font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-size:14px;line-height:1.42857143;color:#333;
			//	background-color:#fff;
			}	input{font-family:inherit;font-size:inherit;line-height:inherit;}
			a{
				color:#3277b3;text-decoration:none;
			}
			a:focus,a:hover{
				color:#23527c;
				text-decoration:underline;
			}
			a:focus{outline:5px auto -webkit-focus-ring-color;outline-offset:-2px;}
			h2,h5{font-family:inherit;font-weight:500;line-height:1.1;color:inherit;}
			h2{margin-top:20px;margin-bottom:10px;}
			h5{margin-top:10px;margin-bottom:10px;}
			h2{font-size:30px;}
			h5{font-size:14px;}
			.form-control{display:block;width:100%;height:34px;padding:6px 12px;font-size:14px;line-height:1.42857143;color:#555;background-color:#fff;background-image:none;border:1px solid #ccc;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075);-webkit-transition:border-color ease-in-out .15s,-webkit-box-shadow ease-in-out .15s;-o-transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s;}
			.form-control:focus{border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);}
			.form-control::-moz-placeholder{color:#999;opacity:1;}
			.form-control:-ms-input-placeholder{color:#999;}
			.form-control::-webkit-input-placeholder{color:#999;}
			.form-control::-ms-expand{background-color:transparent;border:0;}

			/*! ryanspice.com */
			#loader {
				position:absolute;
				left:0%;top:0%;
				margin:0px auto;
				width:100%;
				height:100%;
				//background: rgba(255,255,255,0.55);
				background: rgba(55,55,55,0.55);
				text-align:center;
				z-index:100;
			}
			.load {
			  position: absolute;
			  left: 45%;
				top:30%;
			  margin: 0px auto;
			  width: 400px;
			  margin-left: -25px;
			  width: 15%;
			  opacity: 0.5;
				text-align:center;

			}
			.load-text {
				margin-top:50vh;
				font-size:calc(14px + (26 - 14) * ((100vw - 300px) / (1600 - 300)));
			}
			header {
		  margin-top: 0px;
		  padding-top: 0px;
			}
		</style>

		<script prefetch='true' src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>

</head>

<body>

	<main>


	</main>

	<div id="loader" class="slide hidden" style="display:none;"></div>

	<noscript>Please Enable JavaScript</noscript>

	<div class="titleDiv" hidden>

		<h1 class="title_game" style="opacity: 0;">

		<img style="width:100%;max-width:480px;" src="https://ryanspice.com/images/image_title_ReverenceLost.png">				</h1>

		<img class="image icon" hidden="" disabled="" style="font-size: 1em; width: 490px; margin-left: 0px;">

	</div>

	<span class ="galleryImg"> </span>

</body>
</html>
